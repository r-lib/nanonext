[{"path":[]},{"path":"https://nanonext.r-lib.org/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://nanonext.r-lib.org/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://nanonext.r-lib.org/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://nanonext.r-lib.org/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://nanonext.r-lib.org/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement code@hibiki-ai.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://nanonext.r-lib.org/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://nanonext.r-lib.org/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://nanonext.r-lib.org/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://nanonext.r-lib.org/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://nanonext.r-lib.org/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://nanonext.r-lib.org/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://nanonext.r-lib.org/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 nanonext authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://nanonext.r-lib.org/articles/nanonext.html","id":"table-of-contents","dir":"Articles","previous_headings":"","what":"Table of Contents","title":"nanonext - NNG Lightweight Messaging Library","text":"Cross-language Exchange Async Concurrency RPC Distributed Computing Synchronisation Primitives TLS Secure Connections Publisher / Subscriber Model Surveyor / Respondent Model ncurl: (Async) HTTP Client stream: Websocket Client Options, Serialization Statistics","code":""},{"path":"https://nanonext.r-lib.org/articles/nanonext.html","id":"cross-language-exchange","dir":"Articles","previous_headings":"","what":"Cross-language Exchange","title":"nanonext - NNG Lightweight Messaging Library","text":"nanonext provides fast reliable data interface different programming languages NNG implementation, including C, C++, Java, Python, Go, Rust etc. following example demonstrates exchange numerical data R Python (NumPy), two commonly-used languages data science machine learning. Using messaging interface provides clean robust approach, light resources limited identifiable points failure. approach can also serve interface / pipe different processes written different languages, running computer distributed across networks, enabler modular software design espoused Unix philosophy. One solution provides processing real-time data computation times exceed data frequency - dividing computation stages, may set pipeline ‘cascade’ processes, connected using NNG sockets. Create socket Python using NNG binding ‘pynng’: Create nano object R using nanonext, send vector ‘doubles’, specifying mode ‘raw’: Receive Python NumPy array ‘floats’, send back R: Receive R, specifying receive mode ‘double’: « Back ToC","code":"import numpy as np import pynng socket = pynng.Pair0(listen=\"ipc:///tmp/nanonext.socket\") library(nanonext) n <- nano(\"pair\", dial = \"ipc:///tmp/nanonext.socket\") n$send(c(1.1, 2.2, 3.3, 4.4, 5.5), mode = \"raw\") #> [1] 0 raw = socket.recv() array = np.frombuffer(raw) print(array) #> [1.1 2.2 3.3 4.4 5.5]  msg = array.tobytes() socket.send(msg)  socket.close() n$recv(mode = \"double\") #> [1] 1.1 2.2 3.3 4.4 5.5  n$close()"},{"path":"https://nanonext.r-lib.org/articles/nanonext.html","id":"async-and-concurrency","dir":"Articles","previous_headings":"","what":"Async and Concurrency","title":"nanonext - NNG Lightweight Messaging Library","text":"nanonext implements true async send receive, leveraging NNG massively-scaleable concurrency framework. send_aio() recv_aio() functions return immediately ‘Aio’ object, perform operations async. ‘Aio’ object returns unresolved value whilst asynchronous operation ongoing, automatically resolving final value complete. ‘sendAio’ object, result stored $result. Note: return value 0 denotes successful send, meaning message accepted socket sending; message may still buffered within system. ‘recvAio’ object, message stored $data. Auxiliary function unresolved() may used control flow statements perform actions depend resolution Aio, . means need actually wait (block) Aio resolve, example demonstrates. values may also called explicitly using call_aio(). wait completion Aio (blocking). « Back ToC","code":"s1 <- socket(\"pair\", listen = \"inproc://nano\") s2 <- socket(\"pair\", dial = \"inproc://nano\") # an async receive is requested, but no messages are waiting (yet to be sent) msg <- recv_aio(s2) msg #> < recvAio | $data > msg$data #> 'unresolved' logi NA res <- send_aio(s1, data.frame(a = 1, b = 2)) res #> < sendAio | $result > res$result #> [1] 0 # now that a message has been sent, the 'recvAio' resolves automatically msg$data #>   a b #> 1 1 2 msg <- recv_aio(s2)  # unresolved() queries for resolution itself so no need to use it again within the while loop while (unresolved(msg)) {   # do stuff before checking resolution again   send_aio(s1, \"resolved\")   cat(\"unresolved\") } #> unresolved  # perform actions which depend on the Aio value outside the while loop msg$data #> [1] \"resolved\" # will wait for completion then return the resolved Aio call_aio(msg)  # to access the resolved value (waiting if required): call_aio(msg)$data #> [1] \"resolved\"  # or directly: collect_aio(msg) #> [1] \"resolved\"  # or user-interruptible: msg[] #> [1] \"resolved\"  close(s1) close(s2)"},{"path":"https://nanonext.r-lib.org/articles/nanonext.html","id":"rpc-and-distributed-computing","dir":"Articles","previous_headings":"","what":"RPC and Distributed Computing","title":"nanonext - NNG Lightweight Messaging Library","text":"nanonext implements remote procedure calls (RPC) using NNG’s req/rep protocol provide basis distributed computing. Can used perform computationally-expensive calculations /O-bound operations writing large amounts data disk separate ‘server’ process running concurrently. [S] Server process: reply() wait message apply function, case rnorm(), sending back result. started background ‘mirai’ process. [C] Client process: request() performs async send receive request returns immediately recvAio object. point, client can run additional code concurrent server processing request. result server calculation required, recvAio may called using call_aio(). return value server request retrieved stored Aio $data. call_aio() blocking wait completion, alternative query aio$data directly. return ‘unresolved’ logical NA value calculation yet complete. example calculation returned, operations may reside entirely server side, example writing data disk. case, calling querying value confirms operation completed, provides return value function, may typically NULL exit code. mirai package (https://mirai.r-lib.org/) uses nanonext back-end provide asynchronous execution arbitrary R code using RPC model. « Back ToC","code":"m <- mirai::mirai({   library(nanonext)   rep <- socket(\"rep\", listen = \"tcp://127.0.0.1:6556\")   reply(context(rep), execute = rnorm, send_mode = \"raw\")   Sys.sleep(2) # linger period to flush system socket send }) library(nanonext) req <- socket(\"req\", dial = \"tcp://127.0.0.1:6556\") aio <- request(context(req), data = 1e8, recv_mode = \"double\") # do more... call_aio(aio)$data |> str() #>  num [1:100000000] 0.145 0.959 -0.489 -0.896 1.245 ..."},{"path":"https://nanonext.r-lib.org/articles/nanonext.html","id":"synchronisation-primitives","dir":"Articles","previous_headings":"","what":"Synchronisation Primitives","title":"nanonext - NNG Lightweight Messaging Library","text":"nanonext implements cross-platform synchronisation primitives provided NNG library. R interpreter runs single thread, synchronisation primitives mutexes condition variables natively implemented R language. However, NNG inherently threaded messaging can asynchronous, possible synchronise NNG events main R execution thread. events can signalled include asynchronous receive completions, pipe events - connections established dropped. Condition variables can used simply record events, powerfully, wait upon . condition variables implemented nanonext include condition (value) flag (boolean). signal increments value, successful return wait() () decrements value. non-zero condition allows waiting threads continue. situation polling event presents solution, waiting upon condition signalled can efficient, terms consuming resources waiting, also synchronised event (latency). following shows condition variables signalling work practice. Example 1: set socket, wait side connect: Example 2: wait message received connection dropped: example shows working flag within condition variable. pipe notification specified raise flag, can used distinguish pipe event signal message receive signal. case flag raised, wait() returns FALSE rather TRUE. code stop custom error message upon disconnect else continue. affords way handling disconnects possible simply using call_aio(), also blocking wait (single message). can seen, type mechanism presents powerful way waiting simulatenously multiple events, also distinguishing . pipe_notify() can also set signal two condition variables upon event, providing even flexibility creating complex concurrent applications. details, please refer function documentation cv(). « Back ToC","code":"sock <- socket(\"pair\", listen = \"inproc://nanopipe\")  cv <- cv() # create new condition variable cv_value(cv) #> [1] 0  pipe_notify(sock, cv = cv, add = TRUE, remove = TRUE)  # wait(cv) # uncomment in normal usage - but would block  # for illustration: sock2 <- socket(\"pair\", dial = \"inproc://nanopipe\")  cv_value(cv) # incremented when pipe to 'sock2' was created #> [1] 1  wait(cv) # wait() now does not block  cv_value(cv) # wait() decrements the CV value - calling wait() again will block #> [1] 0  close(sock2)  cv_value(cv) # incremented when pipe to 'sock2' was destroyed #> [1] 1  close(sock) sock <- socket(\"pair\", listen = \"inproc://nanosignal\") sock2 <- socket(\"pair\", dial = \"inproc://nanosignal\")  cv <- cv() # create new condition variable cv_value(cv) #> [1] 0  pipe_notify(sock, cv = cv, add = FALSE, remove = TRUE, flag = TRUE)  send(sock2, \"this message will wake waiting thread\") # in real usage happens concurrently with wait() #> [1] 0  r <- recv_aio(sock, cv = cv) # same cv passed to recv_aio()  # wakes as soon as the asynchronous receive completes wait(cv) || stop(\"peer disconnected\") #> [1] TRUE  r$data #> [1] \"this message will wake waiting thread\"  close(sock) close(sock2)"},{"path":"https://nanonext.r-lib.org/articles/nanonext.html","id":"tls-secure-connections","dir":"Articles","previous_headings":"","what":"TLS Secure Connections","title":"nanonext - NNG Lightweight Messaging Library","text":"Secure connections enabled combination NNG Mbed TLS libraries. Authentication endpoints encryption TCP transport layer achieved transparently : Specifying secure tls+tcp:// wss:// URL, Passing TLS configuration object ‘tls’ argument listen() dial(). TLS configuration, ‘tlsConfig’, object created tls_config() function. Specify argument ‘client’ create client configuration, ‘server’ create server configuration. client configuration requires PEM-encoded CA certificate (chain) used verify server identity. server configuration requires certificate associated private key. may supplied files directly character vectors. Valid X.509 certificates generated via Certificate Signing Request Certificate Authority supported way. Additionally, convenience function write_cert() can automatically generate 4096 bit RSA key pair self-signed X.509 certificate format required tls_config(). ‘cn’ argument must provided match exactly hostname / IP address URL used, e.g. example ‘127.0.0.1’ must used throughout, alternatively ‘localhost’, mixture two. « Back ToC","code":"cert <- write_cert(cn = \"127.0.0.1\") str(cert) #> List of 2 #>  $ server: chr [1:2] \"-----BEGIN CERTIFICATE-----\\nMIIFOTCCAyGgAwIBAgIBATANBgkqhkiG9w0BAQsFADA0MRIwEAYDVQQDDAkxMjcu\\nMC4wLjExETAPBgNV\"| __truncated__ \"-----BEGIN RSA PRIVATE KEY-----\\nMIIJKQIBAAKCAgEAr4Spuk5e4qYBfuZ5Qe8QkPXE9APppdgEhXH0hkTcEsxb7Qf4\\nF/s1SyUcWQUo\"| __truncated__ #>  $ client: chr [1:2] \"-----BEGIN CERTIFICATE-----\\nMIIFOTCCAyGgAwIBAgIBATANBgkqhkiG9w0BAQsFADA0MRIwEAYDVQQDDAkxMjcu\\nMC4wLjExETAPBgNV\"| __truncated__ \"\"  ser <- tls_config(server = cert$server) ser #> < TLS server config | auth mode: optional >  cli <- tls_config(client = cert$client) cli #> < TLS client config | auth mode: required >  s <- socket(listen = \"tls+tcp://127.0.0.1:5558\", tls = ser) s1 <- socket(dial = \"tls+tcp://127.0.0.1:5558\", tls = cli)  # secure TLS connection established  close(s1) close(s)"},{"path":"https://nanonext.r-lib.org/articles/nanonext.html","id":"publisher-subscriber-model","dir":"Articles","previous_headings":"","what":"Publisher Subscriber Model","title":"nanonext - NNG Lightweight Messaging Library","text":"nanonext fully implements NNG’s pub/sub protocol per example. subscriber can subscribe one multiple topics broadcast publisher. subscribed topic can atomic type (just character), allowing integer, double, logical, complex raw vectors sent received. « Back ToC","code":"pub <- socket(\"pub\", listen = \"inproc://nanobroadcast\") sub <- socket(\"sub\", dial = \"inproc://nanobroadcast\")  sub |> subscribe(topic = \"examples\")  pub |> send(c(\"examples\", \"this is an example\"), mode = \"raw\") #> [1] 0 sub |> recv(mode = \"character\") #> [1] \"examples\"           \"this is an example\"  pub |> send(\"examples at the start of a single text message\", mode = \"raw\") #> [1] 0 sub |> recv(mode = \"character\") #> [1] \"examples at the start of a single text message\"  pub |> send(c(\"other\", \"this other topic will not be received\"), mode = \"raw\") #> [1] 0 sub |> recv(mode = \"character\") #> 'errorValue' int 8 | Try again  # specify NULL to subscribe to ALL topics sub |> subscribe(topic = NULL) pub |> send(c(\"newTopic\", \"this is a new topic\"), mode = \"raw\") #> [1] 0 sub |> recv(\"character\") #> [1] \"newTopic\"            \"this is a new topic\"  sub |> unsubscribe(topic = NULL) pub |> send(c(\"newTopic\", \"this topic will now not be received\"), mode = \"raw\") #> [1] 0 sub |> recv(\"character\") #> 'errorValue' int 8 | Try again  # however the topics explicitly subscribed to are still received pub |> send(c(\"examples will still be received\"), mode = \"raw\") #> [1] 0 sub |> recv(mode = \"character\") #> [1] \"examples will still be received\" sub |> subscribe(topic = 1) pub |> send(c(1, 10, 10, 20), mode = \"raw\") #> [1] 0 sub |> recv(mode = \"double\") #> [1]  1 10 10 20 pub |> send(c(2, 10, 10, 20), mode = \"raw\") #> [1] 0 sub |> recv(mode = \"double\") #> 'errorValue' int 8 | Try again  close(pub) close(sub)"},{"path":"https://nanonext.r-lib.org/articles/nanonext.html","id":"surveyor-respondent-model","dir":"Articles","previous_headings":"","what":"Surveyor Respondent Model","title":"nanonext - NNG Lightweight Messaging Library","text":"type pattern useful applications service discovery. surveyor sends survey, broadcast peer respondents. Respondents able reply, obliged . survey timed event, responses received timeout discarded. , msleep() uninterruptible sleep function (utilising NNG library), taking time milliseconds. can seen final value resolves timeout, integer 5 classed ‘errorValue’. integer error codes classed ‘errorValue’ easily distinguishable integer message values. « Back ToC","code":"sur <- socket(\"surveyor\", listen = \"inproc://nanoservice\") res1 <- socket(\"respondent\", dial = \"inproc://nanoservice\") res2 <- socket(\"respondent\", dial = \"inproc://nanoservice\")  # sur sets a survey timeout, applying to this and subsequent surveys sur |> survey_time(value = 500)  # sur sends a message and then requests 2 async receives sur |> send(\"service check\") #> [1] 0 aio1 <- sur |> recv_aio() aio2 <- sur |> recv_aio()  # res1 receives the message and replies using an aio send function res1 |> recv() #> [1] \"service check\" res1 |> send_aio(\"res1\")  # res2 receives the message but fails to reply res2 |> recv() #> [1] \"service check\"  # checking the aio - only the first will have resolved aio1$data #> [1] \"res1\" aio2$data #> 'unresolved' logi NA  # after the survey expires, the second resolves into a timeout error msleep(500) aio2$data #> 'errorValue' int 5 | Timed out  close(sur) close(res1) close(res2)"},{"path":"https://nanonext.r-lib.org/articles/nanonext.html","id":"ncurl-async-http-client","dir":"Articles","previous_headings":"","what":"ncurl: Async HTTP Client","title":"nanonext - NNG Lightweight Messaging Library","text":"ncurl() minimalist http(s) client. ncurl_aio() async edition, performing requests asynchronously, returning immediately ‘ncurlAio’. normal use, takes just URL. can follow redirects. advanced use, supports additional HTTP methods POST PUT. respect, may used performant lightweight method making REST API requests.","code":"ncurl(\"https://postman-echo.com/get\") #> $status #> [1] 200 #>  #> $headers #> NULL #>  #> $data #> [1] \"{\\n  \\\"args\\\": {},\\n  \\\"headers\\\": {\\n    \\\"host\\\": \\\"postman-echo.com\\\",\\n    \\\"x-request-start\\\": \\\"t1745415451.442\\\",\\n    \\\"connection\\\": \\\"close\\\",\\n    \\\"x-forwarded-proto\\\": \\\"https\\\",\\n    \\\"x-forwarded-port\\\": \\\"443\\\",\\n    \\\"x-amzn-trace-id\\\": \\\"Root=1-6808ed1b-16c5d32d02412c5d4e3a1f5d\\\"\\n  },\\n  \\\"url\\\": \\\"https://postman-echo.com/get\\\"\\n}\" res <- ncurl_aio(\"https://postman-echo.com/post\",                  method = \"POST\",                  headers = c(`Content-Type` = \"application/json\", Authorization = \"Bearer APIKEY\"),                  data = '{\"key\": \"value\"}',                  response = \"date\") res #> < ncurlAio | $status $headers $data >  call_aio(res)$headers #> $date #> [1] \"Wed, 23 Apr 2025 13:37:31 GMT\"  res$data #> [1] \"{\\n  \\\"args\\\": {},\\n  \\\"data\\\": {\\n    \\\"key\\\": \\\"value\\\"\\n  },\\n  \\\"files\\\": {},\\n  \\\"form\\\": {},\\n  \\\"headers\\\": {\\n    \\\"host\\\": \\\"postman-echo.com\\\",\\n    \\\"x-request-start\\\": \\\"t1745415451.986\\\",\\n    \\\"connection\\\": \\\"close\\\",\\n    \\\"content-length\\\": \\\"16\\\",\\n    \\\"x-forwarded-proto\\\": \\\"https\\\",\\n    \\\"x-forwarded-port\\\": \\\"443\\\",\\n    \\\"x-amzn-trace-id\\\": \\\"Root=1-6808ed1b-348ca7b6773f69bb06836afa\\\",\\n    \\\"content-type\\\": \\\"application/json\\\",\\n    \\\"authorization\\\": \\\"Bearer APIKEY\\\"\\n  },\\n  \\\"json\\\": {\\n    \\\"key\\\": \\\"value\\\"\\n  },\\n  \\\"url\\\": \\\"https://postman-echo.com/post\\\"\\n}\""},{"path":"https://nanonext.r-lib.org/articles/nanonext.html","id":"ncurl-promises","dir":"Articles","previous_headings":"ncurl: Async HTTP Client","what":"ncurl Promises","title":"nanonext - NNG Lightweight Messaging Library","text":"ncurl_aio() may also used anywhere accepts ‘promise’ promises package, including Shiny ExtendedTask. status code 200 (OK) returned promise resolved reponse body, otherwise rejected translation status code ‘errorValue’ case may .","code":"library(promises)  p <- ncurl_aio(\"https://postman-echo.com/get\") %...>% cat is.promise(p) #> [1] TRUE"},{"path":"https://nanonext.r-lib.org/articles/nanonext.html","id":"ncurl-session","dir":"Articles","previous_headings":"ncurl: Async HTTP Client","what":"ncurl Session","title":"nanonext - NNG Lightweight Messaging Library","text":"ncurl_session() creates re-usable open connection presents much faster efficient solution repeated polling API endpoint. transact() used request data multiple times required. method allows polling frequency exceeds server’s new connection limits, permitted. specifying convert = FALSE, received binary data made available raw vector. may fed ‘json’ parsers can operate directly data etc. « Back ToC","code":"sess <- ncurl_session(\"https://postman-echo.com/get\",                       convert = FALSE,                       headers = c(`Content-Type` = \"application/json\", Authorization = \"Bearer APIKEY\"),                       response = c(\"Date\", \"Content-Type\")) sess #> < ncurlSession > - transact() to return data  transact(sess) #> $status #> [1] 200 #>  #> $headers #> $headers$Date #> [1] \"Wed, 23 Apr 2025 13:37:32 GMT\" #>  #> $headers$`Content-Type` #> [1] \"application/json; charset=utf-8\" #>  #>  #> $data #>   [1] 7b 0a 20 20 22 61 72 67 73 22 3a 20 7b 7d 2c 0a 20 20 22 68 65 61 64 65 72 73 22 3a 20 7b 0a 20 20 20 20 22 #>  [37] 68 6f 73 74 22 3a 20 22 70 6f 73 74 6d 61 6e 2d 65 63 68 6f 2e 63 6f 6d 22 2c 0a 20 20 20 20 22 78 2d 72 65 #>  [73] 71 75 65 73 74 2d 73 74 61 72 74 22 3a 20 22 74 31 37 34 35 34 31 35 34 35 32 2e 34 37 34 22 2c 0a 20 20 20 #> [109] 20 22 63 6f 6e 6e 65 63 74 69 6f 6e 22 3a 20 22 63 6c 6f 73 65 22 2c 0a 20 20 20 20 22 78 2d 66 6f 72 77 61 #> [145] 72 64 65 64 2d 70 72 6f 74 6f 22 3a 20 22 68 74 74 70 73 22 2c 0a 20 20 20 20 22 78 2d 66 6f 72 77 61 72 64 #> [181] 65 64 2d 70 6f 72 74 22 3a 20 22 34 34 33 22 2c 0a 20 20 20 20 22 78 2d 61 6d 7a 6e 2d 74 72 61 63 65 2d 69 #> [217] 64 22 3a 20 22 52 6f 6f 74 3d 31 2d 36 38 30 38 65 64 31 63 2d 34 64 64 34 37 61 35 34 33 34 32 33 36 32 37 #> [253] 63 34 35 34 63 33 39 35 32 22 2c 0a 20 20 20 20 22 63 6f 6e 74 65 6e 74 2d 74 79 70 65 22 3a 20 22 61 70 70 #> [289] 6c 69 63 61 74 69 6f 6e 2f 6a 73 6f 6e 22 2c 0a 20 20 20 20 22 61 75 74 68 6f 72 69 7a 61 74 69 6f 6e 22 3a #> [325] 20 22 42 65 61 72 65 72 20 41 50 49 4b 45 59 22 0a 20 20 7d 2c 0a 20 20 22 75 72 6c 22 3a 20 22 68 74 74 70 #> [361] 73 3a 2f 2f 70 6f 73 74 6d 61 6e 2d 65 63 68 6f 2e 63 6f 6d 2f 67 65 74 22 0a 7d"},{"path":"https://nanonext.r-lib.org/articles/nanonext.html","id":"stream-websocket-client","dir":"Articles","previous_headings":"","what":"stream: Websocket Client","title":"nanonext - NNG Lightweight Messaging Library","text":"stream() exposes NNG’s low-level byte stream interface communicating raw sockets. may used connecting arbitrary non-NNG endpoints. stream interface can used communicate (secure) websocket servers. argument textframes = TRUE can specified websocket server uses text rather binary frames. send() recv(), well asynchronous counterparts send_aio() recv_aio() can used Streams way Sockets. affords great deal flexibility ingesting processing streaming data. « Back ToC","code":"# connecting to an echo service s <- stream(dial = \"wss://echo.websocket.events/\", textframes = TRUE) s #> < nanoStream > #>  - mode: dialer text frames #>  - state: opened #>  - url: wss://echo.websocket.events/ s |> recv() #> [1] \"echo.websocket.events sponsored by Lob.com\"  s |> send(\"initial message\") #> [1] 0  s |> recv() #> [1] \"initial message\"  s |> recv_aio() -> r  s |> send(\"async message\") #> [1] 0  s |> send(\"final message\") #> [1] 0  s |> recv() #> [1] \"final message\"  r$data #> [1] \"async message\"  close(s)"},{"path":"https://nanonext.r-lib.org/articles/nanonext.html","id":"options-serialization-and-statistics","dir":"Articles","previous_headings":"","what":"Options, Serialization and Statistics","title":"nanonext - NNG Lightweight Messaging Library","text":"Use opt() 'opt<-'() get set options Socket, Context, Stream, Listener Dialer. See function documentation page list common options. dialer listener started, generally possible change configuration. case, dialer listener created specifying ‘autostart = FALSE’. special write-option ‘serial’ Sockets, sets serialization configuration returned serial_config(). registers custom functions handle serialization unserialization reference objects, plugging ‘refhook’ system native R serialization. allows transparent send receive objects using mode ‘serial’ without need separate ‘marshalling’ step. set, configurations apply Socket Contexts created Socket. Similarly stat() implemented interface NNG’s statistics framework. can used Socket, Listener Dialer query useful statistics total number connection attempts, current number connections etc. See function documentation page available statistics. « Back ToC","code":"s <- socket(listen = \"inproc://options\", autostart = FALSE)  # no maximum message size opt(s$listener[[1]], \"recv-size-max\") #> [1] 0  # enfore maximum message size to protect against denial-of-service type attacks opt(s$listener[[1]], \"recv-size-max\") <- 8192L  opt(s$listener[[1]], \"recv-size-max\") #> [1] 8192  start(s$listener[[1]]) serial <- serial_config(\"obj_class\", function(x) serialize(x, NULL), unserialize) opt(s, \"serial\") <- serial  close(s) s <- socket(listen = \"inproc://stat\")  # no active connections (pipes) stat(s, \"pipes\") #> [1] 0  s1 <- socket(dial = \"inproc://stat\")  # one now that the dialer has conneceted stat(s, \"pipes\") #> [1] 1  close(s)"},{"path":"https://nanonext.r-lib.org/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Charlie Gao. Author, maintainer. . Copyright holder, funder.           03wc8by49 Hibiki AI Limited. Copyright holder. . Funder.","code":""},{"path":"https://nanonext.r-lib.org/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Gao C (2025). nanonext: NNG (Nanomsg Next Gen) Lightweight Messaging Library. R package version 1.5.2.9006, https://doi.org/10.5281/zenodo.7903429.","code":"@Manual{,   title = {nanonext: NNG (Nanomsg Next Gen) Lightweight Messaging Library},   author = {Charlie Gao},   year = {2025},   note = {R package version 1.5.2.9006},   url = {https://doi.org/10.5281/zenodo.7903429}, }"},{"path":"https://nanonext.r-lib.org/index.html","id":"nanonext-","dir":"","previous_headings":"","what":"NNG (Nanomsg Next Gen) Lightweight Messaging Library","title":"NNG (Nanomsg Next Gen) Lightweight Messaging Library","text":"R binding NNG (Nanomsg Next Gen), successor ZeroMQ. NNG socket library reliable, high-performance messaging -process, IPC, TCP, WebSocket secure TLS transports. Implements ‘Scalability Protocols’, standard common communications patterns including publish/subscribe, request/reply service discovery. threaded concurrency framework, provides toolkit asynchronous programming distributed computing. Intuitive ‘aio’ objects resolve automatically asynchronous operations complete, synchronisation primitives allow R wait upon events signalled concurrent threads. Designed performance reliability, nanonext lightweight wrapper around NNG C library, implemented almost entirely C. Provides interface code processes communicate - receive data generated Python, perform analysis R, send results C++ program – computer across networks spanning globe. Implemented scalability protocols: Bus (mesh networks) Pair (two-way radio) Poly (one--one many) Push/Pull (one-way pipeline) Publisher/Subscriber (topics & broadcast) Request/Reply (RPC) Surveyor/Respondent (voting & service discovery) Supported transports: inproc (intra-process) IPC (inter-process) TCP (IPv4 IPv6) WebSocket TLS (TCP WebSocket) Development TLS implementation generously supported  . Web utilities: ncurl - (async) http(s) client stream - secure websockets client / generic low-level socket interface messenger() - console-based instant messaging authentication","code":""},{"path":"https://nanonext.r-lib.org/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick Start","title":"NNG (Nanomsg Next Gen) Lightweight Messaging Library","text":"nanonext offers 2 equivalent interfaces: functional interface, object-oriented interface.","code":""},{"path":"https://nanonext.r-lib.org/index.html","id":"functional-interface","dir":"","previous_headings":"Quick Start","what":"Functional Interface","title":"NNG (Nanomsg Next Gen) Lightweight Messaging Library","text":"primary object functional interface Socket. Use socket() create socket dial listen address. socket passed first argument subsequent actions send() recv(). Example using Request/Reply (REQ/REP) protocol inproc transport:  (inproc transport uses zero-copy possible much faster solution alternatives) Create sockets: Send message ‘socket1’: Receive message using ‘socket2’:","code":"library(nanonext)  socket1 <- socket(\"req\", listen = \"inproc://nanonext\") socket2 <- socket(\"rep\", dial = \"inproc://nanonext\") send(socket1, \"hello world!\") #> [1] 0 recv(socket2) #> [1] \"hello world!\""},{"path":"https://nanonext.r-lib.org/index.html","id":"object-oriented-interface","dir":"","previous_headings":"Quick Start","what":"Object-oriented Interface","title":"NNG (Nanomsg Next Gen) Lightweight Messaging Library","text":"primary object object-oriented interface nano object. Use nano() create nano object encapsulates Socket Dialer/Listener. Methods $send() $recv() can accessed directly object. Example using Pipeline (Push/Pull) protocol TCP/IP transport: Create nano objects: Send message ‘nano1’: Receive message using ‘nano2’:","code":"library(nanonext)  nano1 <- nano(\"push\", listen = \"tcp://127.0.0.1:5555\") nano2 <- nano(\"pull\", dial = \"tcp://127.0.0.1:5555\") nano1$send(\"hello world!\") #> [1] 0 nano2$recv() #> [1] \"hello world!\""},{"path":"https://nanonext.r-lib.org/index.html","id":"vignette","dir":"","previous_headings":"","what":"Vignette","title":"NNG (Nanomsg Next Gen) Lightweight Messaging Library","text":"Please refer nanonext vignette full package functionality. may accessed within R :","code":"vignette(\"nanonext\", package = \"nanonext\")"},{"path":"https://nanonext.r-lib.org/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"NNG (Nanomsg Next Gen) Lightweight Messaging Library","text":"Install latest release CRAN: current development version R-universe:","code":"install.packages(\"nanonext\") install.packages(\"nanonext\", repos = \"https://r-lib.r-universe.dev\")"},{"path":[]},{"path":"https://nanonext.r-lib.org/index.html","id":"linux--mac--solaris","dir":"","previous_headings":"Building from Source","what":"Linux / Mac / Solaris","title":"NNG (Nanomsg Next Gen) Lightweight Messaging Library","text":"Installation source requires ‘libnng’ >= v1.9.0 ‘libmbedtls’ >= 2.5.0 (suitable installations automatically detected), else ‘cmake’ compile ‘libnng’ v1.10.2 pre-release ‘libmbedtls’ v3.6.2 included within package sources. recommended optimal performance stability let package automatically compile bundled versions ‘libmbedtls’ ‘libnng’ installation. ensure libraries compiled source even system installations present, set NANONEXT_LIBS environment variable prior installation e.g. Sys.setenv(NANONEXT_LIBS = 1). system libraries, ‘libnng’ available libnng-dev (deb) nng-devel (rpm), ‘libmbedtls’ libmbedtls-dev (deb) libmbedtls-devel (rpm). INCLUDE_DIR LIB_DIR environment variables may set prior package installation specify custom location ‘libmbedtls’ ‘libnng’ standard filesystem locations. Additional requirements Solaris: () ‘xz’ package - available OpenCSW, (ii) recent version ‘cmake’ available OpenCSW - refer ‘cmake’ website latest source file.","code":""},{"path":"https://nanonext.r-lib.org/index.html","id":"windows","dir":"","previous_headings":"Building from Source","what":"Windows","title":"NNG (Nanomsg Next Gen) Lightweight Messaging Library","text":"Windows, ‘libnng’ v1.10.2 pre-release ‘libmbedtls’ v3.6.2 compiled package sources installation hence requires ‘Rtools’ toolchain. R >= 4.2 using ‘Rtools42’ newer toolchains, prerequisite ‘cmake’ included. previous R versions using ‘Rtools40’ earlier, may necessary separately install version ‘cmake’ Windows ensure added system’s PATH.","code":""},{"path":"https://nanonext.r-lib.org/index.html","id":"acknowledgements-and-links","dir":"","previous_headings":"","what":"Acknowledgements and Links","title":"NNG (Nanomsg Next Gen) Lightweight Messaging Library","text":"like acknowledge particular: Garrett D’Amore, author NNG library, generous advice implementing feature request specifically efficient ‘aio’ implementation nanonext. R Consortium funding development secure TLS capabilities package, Henrik Bengtsson Landau’s roles making possible. Joe Cheng prototyping integration nanonext later support next generation completely event-driven ‘promises’. Luke Tierney (R Core) Mike Cheng meticulous documentation R serialization mechanism, led package’s implementation low-level interface R serialization. Jeroen Ooms - ‘Anticonf (tm)’ configure script, original ‘configure’ based, although much modified since. Links: ◈ nanonext R package: https://nanonext.r-lib.org/ nanonext listed CRAN Task Views: High Performance Computing: https://cran.r-project.org/view=HighPerformanceComputing Web Technologies: https://cran.r-project.org/view=WebTechnologies NNG: https://nng.nanomsg.org/ Mbed TLS: https://www.trustedfirmware.org/projects/mbed-tls/ – Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"https://nanonext.r-lib.org/reference/as.promise.ncurlAio.html","id":null,"dir":"Reference","previous_headings":"","what":"Make ncurlAio Promise — as.promise.ncurlAio","title":"Make ncurlAio Promise — as.promise.ncurlAio","text":"Creates 'promise' 'ncurlAio' object.","code":""},{"path":"https://nanonext.r-lib.org/reference/as.promise.ncurlAio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make ncurlAio Promise — as.promise.ncurlAio","text":"","code":"# S3 method for class 'ncurlAio' as.promise(x)"},{"path":"https://nanonext.r-lib.org/reference/as.promise.ncurlAio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make ncurlAio Promise — as.promise.ncurlAio","text":"x object class 'ncurlAio'.","code":""},{"path":"https://nanonext.r-lib.org/reference/as.promise.ncurlAio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make ncurlAio Promise — as.promise.ncurlAio","text":"'promise' object.","code":""},{"path":"https://nanonext.r-lib.org/reference/as.promise.ncurlAio.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make ncurlAio Promise — as.promise.ncurlAio","text":"function S3 method generic .promise class 'ncurlAio'. Requires promises package. Allows 'ncurlAio' used promise pipe %...>%, schedules function run upon resolution Aio.","code":""},{"path":"https://nanonext.r-lib.org/reference/as.promise.recvAio.html","id":null,"dir":"Reference","previous_headings":"","what":"Make recvAio Promise — as.promise.recvAio","title":"Make recvAio Promise — as.promise.recvAio","text":"Creates 'promise' 'recvAio' object.","code":""},{"path":"https://nanonext.r-lib.org/reference/as.promise.recvAio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make recvAio Promise — as.promise.recvAio","text":"","code":"# S3 method for class 'recvAio' as.promise(x)"},{"path":"https://nanonext.r-lib.org/reference/as.promise.recvAio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make recvAio Promise — as.promise.recvAio","text":"x object class 'recvAio'.","code":""},{"path":"https://nanonext.r-lib.org/reference/as.promise.recvAio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make recvAio Promise — as.promise.recvAio","text":"'promise' object.","code":""},{"path":"https://nanonext.r-lib.org/reference/as.promise.recvAio.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make recvAio Promise — as.promise.recvAio","text":"function S3 method generic .promise class 'recvAio'. Requires promises package. Allows 'recvAio' used promise pipe %...>%, schedules function run upon resolution Aio.","code":""},{"path":"https://nanonext.r-lib.org/reference/call_aio.html","id":null,"dir":"Reference","previous_headings":"","what":"Call the Value of an Asynchronous Aio Operation — call_aio","title":"Call the Value of an Asynchronous Aio Operation — call_aio","text":"call_aio retrieves value asynchronous Aio operation, waiting operation complete still progress. list Aios, waits asynchronous operations complete returning. call_aio_ variant allows user interrupts, suitable interactive use.","code":""},{"path":"https://nanonext.r-lib.org/reference/call_aio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Call the Value of an Asynchronous Aio Operation — call_aio","text":"","code":"call_aio(x)  call_aio_(x)"},{"path":"https://nanonext.r-lib.org/reference/call_aio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Call the Value of an Asynchronous Aio Operation — call_aio","text":"x Aio list Aios (objects class 'sendAio', 'recvAio' 'ncurlAio').","code":""},{"path":"https://nanonext.r-lib.org/reference/call_aio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Call the Value of an Asynchronous Aio Operation — call_aio","text":"passed object (invisibly).","code":""},{"path":"https://nanonext.r-lib.org/reference/call_aio.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Call the Value of an Asynchronous Aio Operation — call_aio","text":"'recvAio', received value may retrieved $data. 'sendAio', send result may retrieved $result. zero success, else integer error code. access values directly, use example 'recvAio' x: call_aio(x)$data. 'recvAio', error occurred unserialization conversion message data specified mode, raw vector returned instead allow recovery (accompanied warning). Note: function operates silently error even x active Aio list Aios, always returning invisibly passed object.","code":""},{"path":"https://nanonext.r-lib.org/reference/call_aio.html","id":"alternatively","dir":"Reference","previous_headings":"","what":"Alternatively","title":"Call the Value of an Asynchronous Aio Operation — call_aio","text":"Aio values may accessed directly $result 'sendAio', $data 'recvAio'. Aio operation yet complete, 'unresolved' logical NA returned. complete, resolved value returned instead. unresolved() may also used, returns TRUE Aio Aio value yet resolve FALSE otherwise. suitable use control flow statements .","code":""},{"path":"https://nanonext.r-lib.org/reference/call_aio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Call the Value of an Asynchronous Aio Operation — call_aio","text":"","code":"s1 <- socket(\"pair\", listen = \"inproc://nanonext\") s2 <- socket(\"pair\", dial = \"inproc://nanonext\")  res <- send_aio(s1, data.frame(a = 1, b = 2), timeout = 100) res #> < sendAio | $result > call_aio(res) res$result #> [1] 0  msg <- recv_aio(s2, timeout = 100) msg #> < recvAio | $data > call_aio_(msg)$data #>   a b #> 1 1 2  close(s1) close(s2)"},{"path":"https://nanonext.r-lib.org/reference/close.html","id":null,"dir":"Reference","previous_headings":"","what":"Close Connection — close.nanoContext","title":"Close Connection — close.nanoContext","text":"Close Connection Socket, Context, Dialer, Listener, Stream, Pipe, ncurl Session.","code":""},{"path":"https://nanonext.r-lib.org/reference/close.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Close Connection — close.nanoContext","text":"","code":"# S3 method for class 'nanoContext' close(con, ...)  # S3 method for class 'nanoDialer' close(con, ...)  # S3 method for class 'nanoListener' close(con, ...)  # S3 method for class 'ncurlSession' close(con, ...)  # S3 method for class 'nanoSocket' close(con, ...)  # S3 method for class 'nanoStream' close(con, ...)"},{"path":"https://nanonext.r-lib.org/reference/close.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Close Connection — close.nanoContext","text":"con Socket, Context, Dialer, Listener, Stream, 'ncurlSession'. ... used.","code":""},{"path":"https://nanonext.r-lib.org/reference/close.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Close Connection — close.nanoContext","text":"Invisibly, integer exit code (zero success).","code":""},{"path":"https://nanonext.r-lib.org/reference/close.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Close Connection — close.nanoContext","text":"Closing object explicitly frees resources. object can also removed directly case resources freed object garbage collected. Closing Socket associated Context also closes Context. Dialers Listeners implicitly closed Socket associated closed. Closing Socket Context: messages submitted sending may flushed delivered, depending upon transport. Closing Socket data transmission likely lead loss data. automatic linger flush ensure Socket send buffers completely transmitted. Closing Stream: send receive operations pending, terminated new operations fail connection closed. Closing 'ncurlSession' closes http(s) connection.","code":""},{"path":[]},{"path":"https://nanonext.r-lib.org/reference/collect_aio.html","id":null,"dir":"Reference","previous_headings":"","what":"Collect Data of an Aio or List of Aios — collect_aio","title":"Collect Data of an Aio or List of Aios — collect_aio","text":"collect_aio collects data Aio list Aios, waiting resolution still progress. collect_aio_ variant allows user interrupts, suitable interactive use.","code":""},{"path":"https://nanonext.r-lib.org/reference/collect_aio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collect Data of an Aio or List of Aios — collect_aio","text":"","code":"collect_aio(x)  collect_aio_(x)"},{"path":"https://nanonext.r-lib.org/reference/collect_aio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collect Data of an Aio or List of Aios — collect_aio","text":"x Aio list Aios (objects class 'sendAio', 'recvAio' 'ncurlAio').","code":""},{"path":"https://nanonext.r-lib.org/reference/collect_aio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collect Data of an Aio or List of Aios — collect_aio","text":"Depending type x supplied, object list objects (length x, preserving names).","code":""},{"path":"https://nanonext.r-lib.org/reference/collect_aio.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Collect Data of an Aio or List of Aios — collect_aio","text":"function wait asynchronous operation(s) complete still progress (blocking). Using x[] Aio x equivalent user-interruptible collect_aio_(x).","code":""},{"path":"https://nanonext.r-lib.org/reference/collect_aio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collect Data of an Aio or List of Aios — collect_aio","text":"","code":"s1 <- socket(\"pair\", listen = \"inproc://nanonext\") s2 <- socket(\"pair\", dial = \"inproc://nanonext\")  res <- send_aio(s1, data.frame(a = 1, b = 2), timeout = 100) collect_aio(res) #> [1] 0  msg <- recv_aio(s2, timeout = 100) collect_aio_(msg) #>   a b #> 1 1 2  msg[] #>   a b #> 1 1 2  close(s1) close(s2)"},{"path":"https://nanonext.r-lib.org/reference/context.html","id":null,"dir":"Reference","previous_headings":"","what":"Open Context — context","title":"Open Context — context","text":"Open new Context used Socket. purpose Context permit applications share single socket, underlying dialers listeners, still benefiting separate state tracking.","code":""},{"path":"https://nanonext.r-lib.org/reference/context.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open Context — context","text":"","code":"context(socket)"},{"path":"https://nanonext.r-lib.org/reference/context.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open Context — context","text":"socket Socket.","code":""},{"path":"https://nanonext.r-lib.org/reference/context.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open Context — context","text":"Context (object class 'nanoContext' 'nano').","code":""},{"path":"https://nanonext.r-lib.org/reference/context.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Open Context — context","text":"Contexts allow independent concurrent use stateful operations using socket. example, two different contexts created rep socket can receive requests, send replies , without regard interference . following protocols support creation contexts: req, rep, sub (pub/sub pattern), surveyor, respondent. send receive context use send() recv() async counterparts send_aio() recv_aio(). nano objects, use $context_open() method, attach new context $context. See nano().","code":""},{"path":[]},{"path":"https://nanonext.r-lib.org/reference/context.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Open Context — context","text":"","code":"s <- socket(\"req\", listen = \"inproc://nanonext\") ctx <- context(s) ctx #> < nanoContext > #>  - id: 1 #>  - socket: 5 #>  - state: opened #>  - protocol: req close(ctx) close(s)  n <- nano(\"req\", listen = \"inproc://nanonext\") n$context_open() n$context #> < nanoContext > #>  - id: 2 #>  - socket: 6 #>  - state: opened #>  - protocol: req n$context_open() n$context #> < nanoContext > #>  - id: 3 #>  - socket: 6 #>  - state: opened #>  - protocol: req n$context_close() #> [1] 0 n$close()"},{"path":"https://nanonext.r-lib.org/reference/cv.html","id":null,"dir":"Reference","previous_headings":"","what":"Condition Variables — cv","title":"Condition Variables — cv","text":"cv creates new condition variable (protected mutex internal object). wait waits condition signalled completion asynchronous receive pipe event. wait_ variant allows user interrupts, suitable interactive use. waits future time condition signalled completion asynchronous receive pipe event. until_ variant allows user interrupts, suitable interactive use. cv_value inspects internal value condition variable. cv_reset resets internal value flag condition variable. cv_signal signals condition variable.","code":""},{"path":"https://nanonext.r-lib.org/reference/cv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Condition Variables — cv","text":"","code":"cv()  wait(cv)  wait_(cv)  until(cv, msec)  until_(cv, msec)  cv_value(cv)  cv_reset(cv)  cv_signal(cv)"},{"path":"https://nanonext.r-lib.org/reference/cv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Condition Variables — cv","text":"cv 'conditionVariable' object. msec maximum time milliseconds wait condition variable signalled.","code":""},{"path":"https://nanonext.r-lib.org/reference/cv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Condition Variables — cv","text":"cv: 'conditionVariable' object. wait: (invisibly) logical TRUE, else FALSE flag set. : (invisibly) logical TRUE signalled, else FALSE timeout reached. cv_value: integer value condition variable. cv_reset cv_signal: zero (invisibly).","code":""},{"path":"https://nanonext.r-lib.org/reference/cv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Condition Variables — cv","text":"Pass 'conditionVariable' asynchronous receive functions recv_aio() request(). Alternatively, notified pipe event, pass pipe_notify(). Completion receive pipe event, happens asynchronously independently main R thread, signal condition variable incrementing 1. cause R execution thread waiting condition variable using wait() () wake continue. argument msec, non-integer values coerced integer. Non-numeric input ignored return immediately.","code":""},{"path":"https://nanonext.r-lib.org/reference/cv.html","id":"condition","dir":"Reference","previous_headings":"","what":"Condition","title":"Condition Variables — cv","text":"condition internal 'conditionVariable' maintains state (value). signal increments value 1. time wait() () returns (apart due timeout), value decremented 1. internal condition may inspected time using cv_value() reset using cv_reset(). affords high degree flexibility designing complex concurrent applications.","code":""},{"path":"https://nanonext.r-lib.org/reference/cv.html","id":"flag","dir":"Reference","previous_headings":"","what":"Flag","title":"Condition Variables — cv","text":"condition variable also contains flag certain signalling functions pipe_notify() can set. flag set, subsequent wait() calls return logical FALSE instead TRUE. Note flag automatically reset, may reset manually using cv_reset().","code":""},{"path":"https://nanonext.r-lib.org/reference/cv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Condition Variables — cv","text":"","code":"cv <- cv()  if (FALSE) { # \\dontrun{ wait(cv) # would block until the cv is signalled wait_(cv) # would block until the cv is signalled or interrupted } # }  until(cv, 10L) until_(cv, 10L)  cv_value(cv) #> [1] 0  cv_reset(cv)  cv_value(cv) #> [1] 0 cv_signal(cv) cv_value(cv) #> [1] 1"},{"path":"https://nanonext.r-lib.org/reference/dial.html","id":null,"dir":"Reference","previous_headings":"","what":"Dial an Address from a Socket — dial","title":"Dial an Address from a Socket — dial","text":"Creates new Dialer binds Socket.","code":""},{"path":"https://nanonext.r-lib.org/reference/dial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dial an Address from a Socket — dial","text":"","code":"dial(   socket,   url = \"inproc://nanonext\",   tls = NULL,   autostart = TRUE,   error = FALSE )"},{"path":"https://nanonext.r-lib.org/reference/dial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dial an Address from a Socket — dial","text":"socket Socket. url [default 'inproc://nanonext'] URL dial, specifying transport address character string e.g. 'inproc://anyvalue' 'tcp://127.0.0.1:5555' (see transports). tls [default NULL] secure tls+tcp:// wss:// connections , provide TLS configuration object created tls_config(). autostart [default TRUE] whether start dialer (default asynchronously). Set NA start synchronously - less resilient connection immediately possible, avoids subtle errors attempting use socket asynchronous dial completed. Set FALSE setting configuration options dialer generally possible change started. error [default FALSE] behaviour error: FALSE, returns integer exit code accompanied warning, , TRUE, generates error halts execution.","code":""},{"path":"https://nanonext.r-lib.org/reference/dial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dial an Address from a Socket — dial","text":"Invisibly, integer exit code (zero success). new Dialer (object class 'nanoDialer' 'nano') created bound Socket successful.","code":""},{"path":"https://nanonext.r-lib.org/reference/dial.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dial an Address from a Socket — dial","text":"view Dialers bound socket use $dialer socket, returns list Dialer objects. access individual Dialer (e.g. set options ), index list e.g. $dialer[[1]] return first Dialer. Dialer external pointer dialer object, creates single outgoing connection time. connection broken, fails, dialer object automatically attempt reconnect, keep dialer socket destroyed.","code":""},{"path":"https://nanonext.r-lib.org/reference/dial.html","id":"further-details","dir":"Reference","previous_headings":"","what":"Further details","title":"Dial an Address from a Socket — dial","text":"Dialers Listeners always associated single socket. given socket may multiple Listeners /multiple Dialers. client/server relationship described dialer/listener completely orthogonal similar relationship protocols. example, rep socket may use dialer connect listener req socket. orthogonality can lead innovative solutions otherwise challenging communications problems. configuration options dialer/listener set opt<-() starting dialer/listener start(). Dialers/Listeners may destroyed close(). also closed associated socket closed.","code":""},{"path":"https://nanonext.r-lib.org/reference/dial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dial an Address from a Socket — dial","text":"","code":"socket <- socket(\"rep\") dial(socket, url = \"inproc://nanodial\", autostart = FALSE) socket$dialer #> [[1]] #> < nanoDialer > #>  - id: 3 #>  - socket: 7 #>  - state: not started #>  - url: inproc://nanodial #>  start(socket$dialer[[1]]) socket$dialer #> [[1]] #> < nanoDialer > #>  - id: 3 #>  - socket: 7 #>  - state: started #>  - url: inproc://nanodial #>  close(socket$dialer[[1]]) close(socket)  nano <- nano(\"bus\") nano$dial(url = \"inproc://nanodial\", autostart = FALSE) nano$dialer #> [[1]] #> < nanoDialer > #>  - id: 4 #>  - socket: 8 #>  - state: not started #>  - url: inproc://nanodial #>  nano$dialer_start() nano$dialer #> [[1]] #> < nanoDialer > #>  - id: 4 #>  - socket: 8 #>  - state: started #>  - url: inproc://nanodial #>  close(nano$dialer[[1]]) nano$close()"},{"path":"https://nanonext.r-lib.org/reference/dot-advance.html","id":null,"dir":"Reference","previous_headings":"","what":"Advances the RNG State — .advance","title":"Advances the RNG State — .advance","text":"Internal package function.","code":""},{"path":"https://nanonext.r-lib.org/reference/dot-advance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Advances the RNG State — .advance","text":"","code":".advance()"},{"path":"https://nanonext.r-lib.org/reference/dot-advance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Advances the RNG State — .advance","text":"NULL.","code":""},{"path":"https://nanonext.r-lib.org/reference/dot-context.html","id":null,"dir":"Reference","previous_headings":"","what":"Technical Utility: Open Context — .context","title":"Technical Utility: Open Context — .context","text":"Open new Context used Socket. function performance variant context(), designed wrap socket function argument calling request() reply().","code":""},{"path":"https://nanonext.r-lib.org/reference/dot-context.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Technical Utility: Open Context — .context","text":"","code":".context(socket)"},{"path":"https://nanonext.r-lib.org/reference/dot-context.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Technical Utility: Open Context — .context","text":"socket Socket.","code":""},{"path":"https://nanonext.r-lib.org/reference/dot-context.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Technical Utility: Open Context — .context","text":"external pointer.","code":""},{"path":"https://nanonext.r-lib.org/reference/dot-context.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Technical Utility: Open Context — .context","text":"External pointers created function unclassed, hence methods contexts close() work (use reap() instead). Otherwise function identically Context passed messaging functions.","code":""},{"path":"https://nanonext.r-lib.org/reference/dot-header.html","id":null,"dir":"Reference","previous_headings":"","what":"Serialization Headers and Markers — .header","title":"Serialization Headers and Markers — .header","text":"Internal package functions.","code":""},{"path":"https://nanonext.r-lib.org/reference/dot-header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Serialization Headers and Markers — .header","text":"","code":".header(value = 0L)  .read_header(x)  .mark(bool = TRUE)  .read_marker(x)"},{"path":"https://nanonext.r-lib.org/reference/dot-header.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Serialization Headers and Markers — .header","text":"value integer value. x raw vector. bool logical value.","code":""},{"path":"https://nanonext.r-lib.org/reference/dot-header.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Serialization Headers and Markers — .header","text":".header(): integer value supplied. .read_header(): integer value. .mark(): logical bool supplied. .read_marker(): logical value TRUE FALSE.","code":""},{"path":"https://nanonext.r-lib.org/reference/dot-interrupt.html","id":null,"dir":"Reference","previous_headings":"","what":"Interrupt Switch — .interrupt","title":"Interrupt Switch — .interrupt","text":"Sets whether async receive completions trigger interrupt. Internal package function.","code":""},{"path":"https://nanonext.r-lib.org/reference/dot-interrupt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interrupt Switch — .interrupt","text":"","code":".interrupt(x = TRUE)"},{"path":"https://nanonext.r-lib.org/reference/dot-interrupt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interrupt Switch — .interrupt","text":"x logical value.","code":""},{"path":"https://nanonext.r-lib.org/reference/dot-interrupt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interrupt Switch — .interrupt","text":"logical value x supplied.","code":""},{"path":"https://nanonext.r-lib.org/reference/dot-keep.html","id":null,"dir":"Reference","previous_headings":"","what":"Keep Promise — .keep","title":"Keep Promise — .keep","text":"Internal package function.","code":""},{"path":"https://nanonext.r-lib.org/reference/dot-keep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Keep Promise — .keep","text":"","code":".keep(x, ctx)"},{"path":"https://nanonext.r-lib.org/reference/dot-keep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Keep Promise — .keep","text":"x 'recvAio' 'ncurlAio' object. ctx return value environment().","code":""},{"path":"https://nanonext.r-lib.org/reference/dot-keep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Keep Promise — .keep","text":"NULL.","code":""},{"path":"https://nanonext.r-lib.org/reference/dot-keep.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Keep Promise — .keep","text":"successful, x ctx preserved accessible promise callback.","code":""},{"path":"https://nanonext.r-lib.org/reference/dot-unresolved.html","id":null,"dir":"Reference","previous_headings":"","what":"Technical Utility: Query if an Aio is Unresolved — .unresolved","title":"Technical Utility: Query if an Aio is Unresolved — .unresolved","text":"Query whether Aio list Aios remains unresolved. experimental technical utility version unresolved() intended ordinary use. Provides method querying busy status Aio without altering state way .e. attempting retrieve result message.","code":""},{"path":"https://nanonext.r-lib.org/reference/dot-unresolved.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Technical Utility: Query if an Aio is Unresolved — .unresolved","text":"","code":".unresolved(x)"},{"path":"https://nanonext.r-lib.org/reference/dot-unresolved.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Technical Utility: Query if an Aio is Unresolved — .unresolved","text":"x Aio list Aios (objects class 'sendAio', 'recvAio' 'ncurlAio').","code":""},{"path":"https://nanonext.r-lib.org/reference/dot-unresolved.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Technical Utility: Query if an Aio is Unresolved — .unresolved","text":"Logical TRUE x unresolved Aio else FALSE, x list, integer number unresolved Aios list.","code":""},{"path":"https://nanonext.r-lib.org/reference/dot-unresolved.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Technical Utility: Query if an Aio is Unresolved — .unresolved","text":".unresolved() intended used 'recvAio' returned signalling function, case unresolved() must used cases.","code":""},{"path":"https://nanonext.r-lib.org/reference/grapes-twiddle-greater-than-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Signal Forwarder — %~>%","title":"Signal Forwarder — %~>%","text":"Forwards signals one 'conditionVariable' another.","code":""},{"path":"https://nanonext.r-lib.org/reference/grapes-twiddle-greater-than-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Signal Forwarder — %~>%","text":"","code":"cv %~>% cv2"},{"path":"https://nanonext.r-lib.org/reference/grapes-twiddle-greater-than-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Signal Forwarder — %~>%","text":"cv 'conditionVariable' object, forward signal. cv2 'conditionVariable' object, signal forwarded.","code":""},{"path":"https://nanonext.r-lib.org/reference/grapes-twiddle-greater-than-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Signal Forwarder — %~>%","text":"Invisibly, cv2.","code":""},{"path":"https://nanonext.r-lib.org/reference/grapes-twiddle-greater-than-grapes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Signal Forwarder — %~>%","text":"condition value cv initially reset zero operator returns. one forwarder can active cv given time, assigning new forwarding target cancels currently existing forwarding. Changes condition value cv forwarded cv2, occassion cv signalled. means waiting cv cause temporary divergence actual condition value cv recorded cv2, next time cv signalled.","code":""},{"path":"https://nanonext.r-lib.org/reference/grapes-twiddle-greater-than-grapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Signal Forwarder — %~>%","text":"","code":"cva <- cv(); cvb <- cv(); cv1 <- cv(); cv2 <- cv()  cva %~>% cv1 %~>% cv2 cvb %~>% cv2  cv_signal(cva) cv_signal(cvb) cv_value(cv1) #> [1] 1 cv_value(cv2) #> [1] 2"},{"path":"https://nanonext.r-lib.org/reference/is_aio.html","id":null,"dir":"Reference","previous_headings":"","what":"Validators — is_aio","title":"Validators — is_aio","text":"Validator functions object types created nanonext.","code":""},{"path":"https://nanonext.r-lib.org/reference/is_aio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validators — is_aio","text":"","code":"is_aio(x)  is_nano(x)  is_ncurl_session(x)"},{"path":"https://nanonext.r-lib.org/reference/is_aio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validators — is_aio","text":"x object.","code":""},{"path":"https://nanonext.r-lib.org/reference/is_aio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validators — is_aio","text":"Logical value TRUE FALSE.","code":""},{"path":"https://nanonext.r-lib.org/reference/is_aio.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validators — is_aio","text":"object Aio (inheriting class 'sendAio' 'recvAio'). object object inheriting class 'nano' .e. nanoSocket, nanoContext, nanoStream, nanoListener, nanoDialer, nanoMonitor nano Object. object ncurlSession (object class 'ncurlSession'). object Condition Variable (object class 'conditionVariable').","code":""},{"path":"https://nanonext.r-lib.org/reference/is_aio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validators — is_aio","text":"","code":"nc <- call_aio(ncurl_aio(\"https://postman-echo.com/get\", timeout = 1000L)) is_aio(nc) #> [1] TRUE  s <- socket() is_nano(s) #> [1] TRUE n <- nano() is_nano(n) #> [1] TRUE close(s) n$close()  s <- ncurl_session(\"https://postman-echo.com/get\", timeout = 1000L) is_ncurl_session(s) #> [1] TRUE if (is_ncurl_session(s)) close(s)"},{"path":"https://nanonext.r-lib.org/reference/is_error_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Error Validators — is_error_value","title":"Error Validators — is_error_value","text":"Validator functions error value types created nanonext.","code":""},{"path":"https://nanonext.r-lib.org/reference/is_error_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Error Validators — is_error_value","text":"","code":"is_error_value(x)  is_nul_byte(x)"},{"path":"https://nanonext.r-lib.org/reference/is_error_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Error Validators — is_error_value","text":"x object.","code":""},{"path":"https://nanonext.r-lib.org/reference/is_error_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Error Validators — is_error_value","text":"Logical value TRUE FALSE.","code":""},{"path":"https://nanonext.r-lib.org/reference/is_error_value.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Error Validators — is_error_value","text":"object error value generated package. non-success integer return values classed 'errorValue' distinguishable integer message values. Includes error values returned timeout etc. object nul byte.","code":""},{"path":"https://nanonext.r-lib.org/reference/is_error_value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Error Validators — is_error_value","text":"","code":"s <- socket() r <- recv_aio(s, timeout = 10) call_aio(r)$data #> 'errorValue' int 5 | Timed out close(s) r$data == 5L #> [1] TRUE is_error_value(r$data) #> [1] TRUE is_error_value(5L) #> [1] FALSE  is_nul_byte(as.raw(0L)) #> [1] TRUE is_nul_byte(raw(length = 1L)) #> [1] TRUE is_nul_byte(writeBin(\"\", con = raw())) #> [1] TRUE is_nul_byte(0L) #> [1] FALSE is_nul_byte(NULL) #> [1] FALSE is_nul_byte(NA) #> [1] FALSE"},{"path":"https://nanonext.r-lib.org/reference/listen.html","id":null,"dir":"Reference","previous_headings":"","what":"Listen to an Address from a Socket — listen","title":"Listen to an Address from a Socket — listen","text":"Creates new Listener binds Socket.","code":""},{"path":"https://nanonext.r-lib.org/reference/listen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Listen to an Address from a Socket — listen","text":"","code":"listen(   socket,   url = \"inproc://nanonext\",   tls = NULL,   autostart = TRUE,   error = FALSE )"},{"path":"https://nanonext.r-lib.org/reference/listen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Listen to an Address from a Socket — listen","text":"socket Socket. url [default 'inproc://nanonext'] URL dial, specifying transport address character string e.g. 'inproc://anyvalue' 'tcp://127.0.0.1:5555' (see transports). tls [default NULL] secure tls+tcp:// wss:// connections , provide TLS configuration object created tls_config(). autostart [default TRUE] whether start listener. Set FALSE setting configuration options listener generally possible change started. error [default FALSE] behaviour error: FALSE, returns integer exit code accompanied warning, , TRUE, generates error halts execution.","code":""},{"path":"https://nanonext.r-lib.org/reference/listen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Listen to an Address from a Socket — listen","text":"Invisibly, integer exit code (zero success). new Listener (object class 'nanoListener' 'nano') created bound Socket successful.","code":""},{"path":"https://nanonext.r-lib.org/reference/listen.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Listen to an Address from a Socket — listen","text":"view Listeners bound socket use $listener socket, returns list Listener objects. access individual Listener (e.g. set options ), index list e.g. $listener[[1]] return first Listener. listener external pointer listener object, accepts incoming connections. given listener object may many connections time, much like HTTP server can many connections multiple clients simultaneously.","code":""},{"path":"https://nanonext.r-lib.org/reference/listen.html","id":"further-details","dir":"Reference","previous_headings":"","what":"Further details","title":"Listen to an Address from a Socket — listen","text":"Dialers Listeners always associated single socket. given socket may multiple Listeners /multiple Dialers. client/server relationship described dialer/listener completely orthogonal similar relationship protocols. example, rep socket may use dialer connect listener req socket. orthogonality can lead innovative solutions otherwise challenging communications problems. configuration options dialer/listener set opt<-() starting dialer/listener start(). Dialers/Listeners may destroyed close(). also closed associated socket closed.","code":""},{"path":"https://nanonext.r-lib.org/reference/listen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Listen to an Address from a Socket — listen","text":"","code":"socket <- socket(\"req\") listen(socket, url = \"inproc://nanolisten\", autostart = FALSE) socket$listener #> [[1]] #> < nanoListener > #>  - id: 5 #>  - socket: 12 #>  - state: not started #>  - url: inproc://nanolisten #>  start(socket$listener[[1]]) socket$listener #> [[1]] #> < nanoListener > #>  - id: 5 #>  - socket: 12 #>  - state: started #>  - url: inproc://nanolisten #>  close(socket$listener[[1]]) close(socket)  nano <- nano(\"bus\") nano$listen(url = \"inproc://nanolisten\", autostart = FALSE) nano$listener #> [[1]] #> < nanoListener > #>  - id: 6 #>  - socket: 13 #>  - state: not started #>  - url: inproc://nanolisten #>  nano$listener_start() nano$listener #> [[1]] #> < nanoListener > #>  - id: 6 #>  - socket: 13 #>  - state: started #>  - url: inproc://nanolisten #>  close(nano$listener[[1]]) nano$close()"},{"path":"https://nanonext.r-lib.org/reference/mclock.html","id":null,"dir":"Reference","previous_headings":"","what":"Clock Utility — mclock","title":"Clock Utility — mclock","text":"Provides number elapsed milliseconds since arbitrary reference time past. reference time given session, may differ sessions.","code":""},{"path":"https://nanonext.r-lib.org/reference/mclock.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clock Utility — mclock","text":"","code":"mclock()"},{"path":"https://nanonext.r-lib.org/reference/mclock.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clock Utility — mclock","text":"double.","code":""},{"path":"https://nanonext.r-lib.org/reference/mclock.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clock Utility — mclock","text":"convenience function building concurrent applications. resolution clock depends underlying system timing facilities may particularly fine-grained. utility however faster using Sys.time().","code":""},{"path":"https://nanonext.r-lib.org/reference/mclock.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clock Utility — mclock","text":"","code":"time <- mclock(); msleep(100); mclock() - time #> [1] 101"},{"path":"https://nanonext.r-lib.org/reference/messenger.html","id":null,"dir":"Reference","previous_headings":"","what":"Messenger — messenger","title":"Messenger — messenger","text":"Multi-threaded, console-based, 2-way instant messaging system authentication, based NNG scalability protocols.","code":""},{"path":"https://nanonext.r-lib.org/reference/messenger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Messenger — messenger","text":"","code":"messenger(url, auth = NULL)"},{"path":"https://nanonext.r-lib.org/reference/messenger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Messenger — messenger","text":"url URL connect , specifying transport address character string e.g. 'tcp://127.0.0.1:5555' (see transports). auth [default NULL] R object (possessed parties) serves pre-shared key authenticate communication. Note: object never sent, random subset md5 hash serialization.","code":""},{"path":"https://nanonext.r-lib.org/reference/messenger.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Messenger — messenger","text":"Invisible NULL.","code":""},{"path":"https://nanonext.r-lib.org/reference/messenger.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Messenger — messenger","text":"authentication protocol experimental proof concept secure, used critical applications.","code":""},{"path":"https://nanonext.r-lib.org/reference/messenger.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Messenger — messenger","text":"Type outgoing messages hit return send. timestamps outgoing messages prefixed > incoming messages <. :q command quit. parties must supply argument auth, otherwise party trying connect receive 'authentication error' immediately disconnected.","code":""},{"path":"https://nanonext.r-lib.org/reference/monitor.html","id":null,"dir":"Reference","previous_headings":"","what":"Monitor a Socket for Pipe Changes — monitor","title":"Monitor a Socket for Pipe Changes — monitor","text":"function monitors pipe additions removals socket.","code":""},{"path":"https://nanonext.r-lib.org/reference/monitor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monitor a Socket for Pipe Changes — monitor","text":"","code":"monitor(sock, cv)  read_monitor(x)"},{"path":"https://nanonext.r-lib.org/reference/monitor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monitor a Socket for Pipe Changes — monitor","text":"sock Socket. cv 'conditionVariable'. x Monitor.","code":""},{"path":"https://nanonext.r-lib.org/reference/monitor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monitor a Socket for Pipe Changes — monitor","text":"monitor: Monitor (object class 'nanoMonitor').  read_monitor: integer vector pipe IDs (positive added, negative removed), else NULL changes since previous read.","code":""},{"path":"https://nanonext.r-lib.org/reference/monitor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Monitor a Socket for Pipe Changes — monitor","text":"","code":"cv <- cv() s <- socket(\"poly\") s1 <- socket(\"poly\")  m <- monitor(s, cv) m #> < nanoMonitor > #>  - socket: 14  listen(s) dial(s1)  cv_value(cv) #> [1] 1 read_monitor(m) #> [1] 304697963  close(s) close(s1)  read_monitor(m) #> [1] -304697963"},{"path":"https://nanonext.r-lib.org/reference/msleep.html","id":null,"dir":"Reference","previous_headings":"","what":"Sleep Utility — msleep","title":"Sleep Utility — msleep","text":"Sleep function. May block longer requested, actual wait time determined capabilities underlying system.","code":""},{"path":"https://nanonext.r-lib.org/reference/msleep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sleep Utility — msleep","text":"","code":"msleep(time)"},{"path":"https://nanonext.r-lib.org/reference/msleep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sleep Utility — msleep","text":"time integer number milliseconds block caller.","code":""},{"path":"https://nanonext.r-lib.org/reference/msleep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sleep Utility — msleep","text":"Invisible NULL.","code":""},{"path":"https://nanonext.r-lib.org/reference/msleep.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sleep Utility — msleep","text":"Non-integer values time coerced integer. Negative, logical non-numeric values ignored, causing function return immediately. Note unlike Sys.sleep(), function user-interruptible sending SIGINT e.g. ctrl + c.","code":""},{"path":"https://nanonext.r-lib.org/reference/msleep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sleep Utility — msleep","text":"","code":"time <- mclock(); msleep(100); mclock() - time #> [1] 101"},{"path":"https://nanonext.r-lib.org/reference/nano.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Nano Object — nano","title":"Create Nano Object — nano","text":"Create nano object, encapsulating Socket, Dialers/Listeners associated methods.","code":""},{"path":"https://nanonext.r-lib.org/reference/nano.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Nano Object — nano","text":"","code":"nano(   protocol = c(\"bus\", \"pair\", \"poly\", \"push\", \"pull\", \"pub\", \"sub\", \"req\", \"rep\",     \"surveyor\", \"respondent\"),   dial = NULL,   listen = NULL,   tls = NULL,   autostart = TRUE )"},{"path":"https://nanonext.r-lib.org/reference/nano.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Nano Object — nano","text":"protocol [default 'bus'] choose protocol - \"bus\", \"pair\", \"poly\", \"push\", \"pull\", \"pub\", \"sub\", \"req\", \"rep\", \"surveyor\", \"respondent\" - see protocols. dial (optional) URL dial, specifying transport address character string e.g. 'inproc://anyvalue' 'tcp://127.0.0.1:5555' (see transports). listen (optional) URL listen , specifying transport address character string e.g. 'inproc://anyvalue' 'tcp://127.0.0.1:5555' (see transports). tls [default NULL] secure tls+tcp:// wss:// connections , provide TLS configuration object created tls_config(). autostart [default TRUE] whether start dialer/listener. Set FALSE setting configuration options dialer/listener generally possible change started. dialers : set NA start synchronously - less resilient connection immediately possible, avoids subtle errors attempting use socket asynchronous dial completed.","code":""},{"path":"https://nanonext.r-lib.org/reference/nano.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Nano Object — nano","text":"nano object class 'nanoObject'.","code":""},{"path":"https://nanonext.r-lib.org/reference/nano.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Nano Object — nano","text":"function encapsulates Socket, Dialer /Listener, associated methods. Socket may accessed $socket, Dialer Listener $dialer[[1]] $listener[[1]] respectively. object's methods may accessed $ e.g. $send() $recv(). methods mirror functional equivalents, arguments defaults, apart first argument functional equivalent mapped object's encapsulated socket (context, active) need supplied. complex network topologies may created binding dialers listeners using object's $dial() $listen() methods. new dialer/listener attached object e.g. object already dialer, $dialer[[2]] etc. Note $dialer_opt() $listener_opt() methods available dialers/listeners attached object. methods get apply settings dialers listeners equally. get apply settings individual dialers/listeners, access directly via $dialer[[2]] $listener[[2]] etc. methods $opt(), also $dialer_opt() $listener_opt() may applicable, get requested option single argument name provided, set value option arguments name value provided. Dialers Listeners automatically started, $dialer_start() $listener_start() methods available. act recently created Dialer Listener respectively. applicable protocols, new contexts may created using $context_open() method. attach new context $context well $context_close() method. context active, object methods use context rather socket. new context may created calling $context_open(), replace existing context. necessary use $context_close() close existing context revert using socket.","code":""},{"path":"https://nanonext.r-lib.org/reference/nano.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Nano Object — nano","text":"","code":"nano <- nano(\"bus\", listen = \"inproc://nanonext\") nano #> < nano object > #>  - socket id: 16 #>  - state: opened #>  - protocol: bus #>  - listener: #>     inproc://nanonext nano$socket #> < nanoSocket > #>  - id: 16 #>  - state: opened #>  - protocol: bus #>  - listener: #>     inproc://nanonext nano$listener[[1]] #> < nanoListener > #>  - id: 8 #>  - socket: 16 #>  - state: started #>  - url: inproc://nanonext  nano$opt(\"send-timeout\", 1500) nano$opt(\"send-timeout\") #> [1] 1500  nano$listen(url = \"inproc://nanonextgen\") nano$listener #> [[1]] #> < nanoListener > #>  - id: 8 #>  - socket: 16 #>  - state: started #>  - url: inproc://nanonext #>  #> [[2]] #> < nanoListener > #>  - id: 9 #>  - socket: 16 #>  - state: started #>  - url: inproc://nanonextgen #>   nano1 <- nano(\"bus\", dial = \"inproc://nanonext\") nano$send(\"example test\", mode = \"raw\") #> [1] 0 nano1$recv(\"character\") #> [1] \"example test\"  nano$close() nano1$close()"},{"path":"https://nanonext.r-lib.org/reference/nanonext-package.html","id":null,"dir":"Reference","previous_headings":"","what":"nanonext: NNG (Nanomsg Next Gen) Lightweight Messaging Library — nanonext-package","title":"nanonext: NNG (Nanomsg Next Gen) Lightweight Messaging Library — nanonext-package","text":"R binding NNG (Nanomsg Next Gen), successor ZeroMQ. NNG socket library reliable, high-performance messaging -process, IPC, TCP, WebSocket secure TLS transports. Implements 'Scalability Protocols', standard common communications patterns including publish/subscribe, request/reply service discovery. threaded concurrency framework, provides toolkit asynchronous programming distributed computing. Intuitive 'aio' objects resolve automatically asynchronous operations complete, synchronisation primitives allow R wait upon events signalled concurrent threads.","code":""},{"path":"https://nanonext.r-lib.org/reference/nanonext-package.html","id":"usage-notes","dir":"Reference","previous_headings":"","what":"Usage notes","title":"nanonext: NNG (Nanomsg Next Gen) Lightweight Messaging Library — nanonext-package","text":"nanonext offers 2 equivalent interfaces: functional interface, object-oriented interface. primary object functional interface Socket. Use socket() create socket dial listen address. socket passed first argument subsequent actions send() recv(). primary object object-oriented interface nano object. Use nano() create nano object encapsulates Socket Dialer/Listener. Methods $send() $recv() can accessed directly object.","code":""},{"path":"https://nanonext.r-lib.org/reference/nanonext-package.html","id":"documentation","dir":"Reference","previous_headings":"","what":"Documentation","title":"nanonext: NNG (Nanomsg Next Gen) Lightweight Messaging Library — nanonext-package","text":"Guide implemented protocols sockets: protocols Guide supported transports dialers listeners: transports Guide options can inspected set using: opt / opt<-","code":""},{"path":"https://nanonext.r-lib.org/reference/nanonext-package.html","id":"reference-manual","dir":"Reference","previous_headings":"","what":"Reference Manual","title":"nanonext: NNG (Nanomsg Next Gen) Lightweight Messaging Library — nanonext-package","text":"vignette(\"nanonext\", package = \"nanonext\")","code":""},{"path":"https://nanonext.r-lib.org/reference/nanonext-package.html","id":"conceptual-overview","dir":"Reference","previous_headings":"","what":"Conceptual overview","title":"nanonext: NNG (Nanomsg Next Gen) Lightweight Messaging Library — nanonext-package","text":"NNG presents socket view networking. socket implements precisely one protocol, 'bus', etc. socket can used send receive messages (protocol supports , implements appropriate protocol semantics). example, 'sub' protocol automatically filters incoming messages discard topics subscribed. NNG sockets message-oriented, messages either delivered wholly, . Partial delivery possible. Furthermore, NNG provide delivery ordering guarantees: messages may dropped reordered (protocols, 'req' may offer stronger guarantees performing retry validation schemes). socket can zero, one, many endpoints, either listeners dialers (given socket may use listeners, dialers, ). endpoints provide access underlying transports, TCP, etc. endpoint associated URL, service address. dialers, service address contacted, whereas listeners new connections accepted.","code":""},{"path":"https://nanonext.r-lib.org/reference/nanonext-package.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"nanonext: NNG (Nanomsg Next Gen) Lightweight Messaging Library — nanonext-package","text":"NNG: https://nng.nanomsg.org/  Mbed TLS: https://www.trustedfirmware.org/projects/mbed-tls/","code":""},{"path":[]},{"path":"https://nanonext.r-lib.org/reference/nanonext-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"nanonext: NNG (Nanomsg Next Gen) Lightweight Messaging Library — nanonext-package","text":"Maintainer: Charlie Gao charlie.gao@shikokuchuo.net (ORCID) contributors: Posit Software, PBC (ROR) [copyright holder, funder] Hibiki AI Limited [copyright holder] R Consortium [funder]","code":""},{"path":"https://nanonext.r-lib.org/reference/ncurl.html","id":null,"dir":"Reference","previous_headings":"","what":"ncurl — ncurl","title":"ncurl — ncurl","text":"nano cURL - minimalist http(s) client.","code":""},{"path":"https://nanonext.r-lib.org/reference/ncurl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ncurl — ncurl","text":"","code":"ncurl(   url,   convert = TRUE,   follow = FALSE,   method = NULL,   headers = NULL,   data = NULL,   response = NULL,   timeout = NULL,   tls = NULL )"},{"path":"https://nanonext.r-lib.org/reference/ncurl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ncurl — ncurl","text":"url URL address. convert [default TRUE] logical value whether attempt conversion received raw bytes character vector. Set FALSE downloading non-text data. follow [default FALSE] logical value whether automatically follow redirects (applicable async requests). FALSE, redirect address returned response header 'Location'. method (optional) HTTP method character string. Defaults 'GET' specified, also 'POST', 'PUT' etc. headers (optional) named character vector specifying HTTP request headers, example: c(Authorization = \"Bearer APIKEY\", \"Content-Type\" = \"text/plain\")  non-character non-named vector ignored. data (optional) character string request data submitted. vector, first element taken, non-character objects ignored. response (optional) character vector specifying response headers return e.g. c(\"date\", \"server\"). case-insensitive return NULL present. non-character vector ignored. timeout (optional) integer value milliseconds transaction times yet complete. tls (optional) applicable secure HTTPS sites , client TLS Configuration object created tls_config(). missing NULL, certificates validated.","code":""},{"path":"https://nanonext.r-lib.org/reference/ncurl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ncurl — ncurl","text":"Named list 3 elements: $status - integer HTTP repsonse status code (200 - OK). Use status_code() translation meaning. $headers - named list response headers supplied response, NULL otherwise. status code within 300 range, .e. redirect, response header 'Location' automatically appended return redirect address. $data - response body, character string convert = TRUE (may parsed html, json, xml etc. required), raw byte vector FALSE (use writeBin() save file).","code":""},{"path":[]},{"path":"https://nanonext.r-lib.org/reference/ncurl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ncurl — ncurl","text":"","code":"ncurl(   \"https://postman-echo.com/get\",   convert = FALSE,   response = c(\"date\", \"content-type\"),   timeout = 1200L ) #> $status #> 'errorValue' int 5 | Timed out #>  #> $headers #> 'errorValue' int 5 | Timed out #>  #> $data #> 'errorValue' int 5 | Timed out #>  ncurl(   \"https://postman-echo.com/put\",   method = \"PUT\",   headers = c(Authorization = \"Bearer APIKEY\"),   data = \"hello world\",   timeout = 1500L ) #> $status #> [1] 200 #>  #> $headers #> NULL #>  #> $data #> [1] \"{\\n  \\\"args\\\": {},\\n  \\\"data\\\": \\\"hello world\\\",\\n  \\\"files\\\": {},\\n  \\\"form\\\": {},\\n  \\\"headers\\\": {\\n    \\\"host\\\": \\\"postman-echo.com\\\",\\n    \\\"x-request-start\\\": \\\"t1745698639.729\\\",\\n    \\\"connection\\\": \\\"close\\\",\\n    \\\"content-length\\\": \\\"11\\\",\\n    \\\"x-forwarded-proto\\\": \\\"https\\\",\\n    \\\"x-forwarded-port\\\": \\\"443\\\",\\n    \\\"x-amzn-trace-id\\\": \\\"Root=1-680d3f4f-37a9edcf1370569b1b4da497\\\",\\n    \\\"authorization\\\": \\\"Bearer APIKEY\\\",\\n    \\\"content-type\\\": \\\"application/json\\\"\\n  },\\n  \\\"json\\\": null,\\n  \\\"url\\\": \\\"https://postman-echo.com/put\\\"\\n}\" #>  ncurl(   \"https://postman-echo.com/post\",   method = \"POST\",   headers = c(`Content-Type` = \"application/json\"),   data = '{\"key\":\"value\"}',   timeout = 1500L ) #> $status #> [1] 200 #>  #> $headers #> NULL #>  #> $data #> [1] \"{\\n  \\\"args\\\": {},\\n  \\\"data\\\": {\\n    \\\"key\\\": \\\"value\\\"\\n  },\\n  \\\"files\\\": {},\\n  \\\"form\\\": {},\\n  \\\"headers\\\": {\\n    \\\"host\\\": \\\"postman-echo.com\\\",\\n    \\\"x-request-start\\\": \\\"t1745698640.409\\\",\\n    \\\"connection\\\": \\\"close\\\",\\n    \\\"content-length\\\": \\\"15\\\",\\n    \\\"x-forwarded-proto\\\": \\\"https\\\",\\n    \\\"x-forwarded-port\\\": \\\"443\\\",\\n    \\\"x-amzn-trace-id\\\": \\\"Root=1-680d3f50-0264cb383cd52fdf27f25190\\\",\\n    \\\"content-type\\\": \\\"application/json\\\"\\n  },\\n  \\\"json\\\": {\\n    \\\"key\\\": \\\"value\\\"\\n  },\\n  \\\"url\\\": \\\"https://postman-echo.com/post\\\"\\n}\" #>"},{"path":"https://nanonext.r-lib.org/reference/ncurl_aio.html","id":null,"dir":"Reference","previous_headings":"","what":"ncurl Async — ncurl_aio","title":"ncurl Async — ncurl_aio","text":"nano cURL - minimalist http(s) client - async edition.","code":""},{"path":"https://nanonext.r-lib.org/reference/ncurl_aio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ncurl Async — ncurl_aio","text":"","code":"ncurl_aio(   url,   convert = TRUE,   method = NULL,   headers = NULL,   data = NULL,   response = NULL,   timeout = NULL,   tls = NULL )"},{"path":"https://nanonext.r-lib.org/reference/ncurl_aio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ncurl Async — ncurl_aio","text":"url URL address. convert [default TRUE] logical value whether attempt conversion received raw bytes character vector. Set FALSE downloading non-text data. method (optional) HTTP method character string. Defaults 'GET' specified, also 'POST', 'PUT' etc. headers (optional) named character vector specifying HTTP request headers, example: c(Authorization = \"Bearer APIKEY\", \"Content-Type\" = \"text/plain\")  non-character non-named vector ignored. data (optional) character string request data submitted. vector, first element taken, non-character objects ignored. response (optional) character vector specifying response headers return e.g. c(\"date\", \"server\"). case-insensitive return NULL present. non-character vector ignored. timeout (optional) integer value milliseconds transaction times yet complete. tls (optional) applicable secure HTTPS sites , client TLS Configuration object created tls_config(). missing NULL, certificates validated.","code":""},{"path":"https://nanonext.r-lib.org/reference/ncurl_aio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ncurl Async — ncurl_aio","text":"'ncurlAio' (object class 'ncurlAio' 'recvAio') (invisibly). following elements may accessed: $status - integer HTTP repsonse status code (200 - OK). Use status_code() translation meaning. $headers - named list response headers supplied response, NULL otherwise. status code within 300 range, .e. redirect, response header 'Location' automatically appended return redirect address. $data - response body, character string convert = TRUE (may parsed html, json, xml etc. required), raw byte vector FALSE (use writeBin() save file).","code":""},{"path":"https://nanonext.r-lib.org/reference/ncurl_aio.html","id":"promises","dir":"Reference","previous_headings":"","what":"Promises","title":"ncurl Async — ncurl_aio","text":"'ncurlAio' may used anywhere accepts 'promise' promises package included .promise method. promises created completely event-driven non-polling. status code 200 (OK) returned promise resolved reponse body, otherwise rejected translation status code 'errorValue' case may .","code":""},{"path":[]},{"path":"https://nanonext.r-lib.org/reference/ncurl_aio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ncurl Async — ncurl_aio","text":"","code":"nc <- ncurl_aio(   \"https://postman-echo.com/get\",   response = c(\"date\", \"server\"),   timeout = 2000L ) call_aio(nc) nc$status #> [1] 200 nc$headers #> $date #> [1] \"Sat, 26 Apr 2025 20:17:20 GMT\" #>  #> $server #> [1] \"nginx\" #>  nc$data #> [1] \"{\\n  \\\"args\\\": {},\\n  \\\"headers\\\": {\\n    \\\"host\\\": \\\"postman-echo.com\\\",\\n    \\\"x-request-start\\\": \\\"t1745698640.991\\\",\\n    \\\"connection\\\": \\\"close\\\",\\n    \\\"x-forwarded-proto\\\": \\\"https\\\",\\n    \\\"x-forwarded-port\\\": \\\"443\\\",\\n    \\\"x-amzn-trace-id\\\": \\\"Root=1-680d3f50-666c3c700ce8e327791c81bc\\\"\\n  },\\n  \\\"url\\\": \\\"https://postman-echo.com/get\\\"\\n}\"  if (FALSE) { # interactive() && requireNamespace(\"promises\", quietly = TRUE) library(promises) p <- as.promise(nc) print(p)  p2 <- ncurl_aio(\"https://postman-echo.com/get\") %...>% cat is.promise(p2) }"},{"path":"https://nanonext.r-lib.org/reference/ncurl_session.html","id":null,"dir":"Reference","previous_headings":"","what":"ncurl Session — ncurl_session","title":"ncurl Session — ncurl_session","text":"nano cURL - minimalist http(s) client. session encapsulates connection, along related parameters, may used return data multiple times repeatedly calling transact(), transacts connection.","code":""},{"path":"https://nanonext.r-lib.org/reference/ncurl_session.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ncurl Session — ncurl_session","text":"","code":"ncurl_session(   url,   convert = TRUE,   method = NULL,   headers = NULL,   data = NULL,   response = NULL,   timeout = NULL,   tls = NULL )  transact(session)"},{"path":"https://nanonext.r-lib.org/reference/ncurl_session.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ncurl Session — ncurl_session","text":"url URL address. convert [default TRUE] logical value whether attempt conversion received raw bytes character vector. Set FALSE downloading non-text data. method (optional) HTTP method character string. Defaults 'GET' specified, also 'POST', 'PUT' etc. headers (optional) named character vector specifying HTTP request headers, example: c(Authorization = \"Bearer APIKEY\", \"Content-Type\" = \"text/plain\")  non-character non-named vector ignored. data (optional) character string request data submitted. vector, first element taken, non-character objects ignored. response (optional) character vector specifying response headers return e.g. c(\"date\", \"server\"). case-insensitive return NULL present. non-character vector ignored. timeout (optional) integer value milliseconds connection subsequent transact attempts time . tls (optional) applicable secure HTTPS sites , client TLS Configuration object created tls_config(). missing NULL, certificates validated. session 'ncurlSession' object.","code":""},{"path":"https://nanonext.r-lib.org/reference/ncurl_session.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ncurl Session — ncurl_session","text":"ncurl_session: 'ncurlSession' object successful, else 'errorValue'. transact: named list 3 elements: $status - integer HTTP repsonse status code (200 - OK). Use status_code() translation meaning. $headers - named list response headers (specified session), NULL otherwise. status code within 300 range, .e. redirect, response header 'Location' automatically appended return redirect address. $data - response body character string (convert = TRUE specified session), may parsed html, json, xml etc. required, else raw byte vector, may saved file using writeBin().","code":""},{"path":[]},{"path":"https://nanonext.r-lib.org/reference/ncurl_session.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ncurl Session — ncurl_session","text":"","code":"s <- ncurl_session(   \"https://postman-echo.com/get\",   response = \"date\",   timeout = 2000L ) s #> < ncurlSession > - transact() to return data if (is_ncurl_session(s)) transact(s) #> $status #> [1] 200 #>  #> $headers #> $headers$date #> [1] \"Sat, 26 Apr 2025 20:17:21 GMT\" #>  #>  #> $data #> [1] \"{\\n  \\\"args\\\": {},\\n  \\\"headers\\\": {\\n    \\\"host\\\": \\\"postman-echo.com\\\",\\n    \\\"x-request-start\\\": \\\"t1745698641.945\\\",\\n    \\\"connection\\\": \\\"close\\\",\\n    \\\"x-forwarded-proto\\\": \\\"https\\\",\\n    \\\"x-forwarded-port\\\": \\\"443\\\",\\n    \\\"x-amzn-trace-id\\\": \\\"Root=1-680d3f51-4ec65c011f2c43663f9aa3bc\\\"\\n  },\\n  \\\"url\\\": \\\"https://postman-echo.com/get\\\"\\n}\" #>  if (is_ncurl_session(s)) close(s)"},{"path":"https://nanonext.r-lib.org/reference/nng_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate Error Codes — nng_error","title":"Translate Error Codes — nng_error","text":"Translate integer exit codes generated NNG library. package functions return integer exit code error rather expected return value. classed 'errorValue' may checked is_error_value().","code":""},{"path":"https://nanonext.r-lib.org/reference/nng_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate Error Codes — nng_error","text":"","code":"nng_error(xc)"},{"path":"https://nanonext.r-lib.org/reference/nng_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate Error Codes — nng_error","text":"xc integer exit code translate.","code":""},{"path":"https://nanonext.r-lib.org/reference/nng_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translate Error Codes — nng_error","text":"character string comprising error code error message separated '|'.","code":""},{"path":"https://nanonext.r-lib.org/reference/nng_error.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Translate Error Codes — nng_error","text":"","code":"nng_error(1L) #> [1] \"1 | Interrupted\""},{"path":"https://nanonext.r-lib.org/reference/nng_version.html","id":null,"dir":"Reference","previous_headings":"","what":"NNG Library Version — nng_version","title":"NNG Library Version — nng_version","text":"Returns versions 'libnng' 'libmbedtls' libraries used package.","code":""},{"path":"https://nanonext.r-lib.org/reference/nng_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NNG Library Version — nng_version","text":"","code":"nng_version()"},{"path":"https://nanonext.r-lib.org/reference/nng_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NNG Library Version — nng_version","text":"character vector length 2.","code":""},{"path":"https://nanonext.r-lib.org/reference/nng_version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NNG Library Version — nng_version","text":"","code":"nng_version() #> [1] \"1.10.2pre\"      \"Mbed TLS 3.6.2\""},{"path":"https://nanonext.r-lib.org/reference/opt.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and Set Options for a Socket, Context, Stream, Listener or Dialer — opt","title":"Get and Set Options for a Socket, Context, Stream, Listener or Dialer — opt","text":"Get set value options Socket, Context, Stream, Listener Dialer.","code":""},{"path":"https://nanonext.r-lib.org/reference/opt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and Set Options for a Socket, Context, Stream, Listener or Dialer — opt","text":"","code":"opt(object, name)  opt(object, name) <- value"},{"path":"https://nanonext.r-lib.org/reference/opt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and Set Options for a Socket, Context, Stream, Listener or Dialer — opt","text":"object Socket, Context, Stream, Listener Dialer. name name option, e.g. 'recv-buffer', character string. See options details. value value option. Supply character type 'string' options, integer double 'int', 'duration', 'size' 'uint64', logical 'bool'.","code":""},{"path":"https://nanonext.r-lib.org/reference/opt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get and Set Options for a Socket, Context, Stream, Listener or Dialer — opt","text":"value option (logical type 'bool', integer 'int', 'duration' 'size', character 'string', double 'uint64').","code":""},{"path":"https://nanonext.r-lib.org/reference/opt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get and Set Options for a Socket, Context, Stream, Listener or Dialer — opt","text":"Note: dialer listener started, generally possible change configuration. Hence create dialer listener autostart = FALSE configuration needs set. get set options Listener Dialer attached Socket nano object, pass objects directly via example $listener[[1]] first Listener. options meaningful supported certain contexts; example single meaningful address socket, since sockets can multiple dialers endpoints associated . authoritative guide please refer online documentation NNG library https://nng.nanomsg.org/man/.","code":""},{"path":"https://nanonext.r-lib.org/reference/opt.html","id":"serialization","dir":"Reference","previous_headings":"","what":"Serialization","title":"Get and Set Options for a Socket, Context, Stream, Listener or Dialer — opt","text":"Apart NNG options documented , following special option: 'serial' (type list) Sockets . accepts configuration created serial_config(). Setting new configuration replaces already set. remove entirely, supply empty list. Note: option write-can set retrieved.","code":""},{"path":"https://nanonext.r-lib.org/reference/opt.html","id":"global-options","dir":"Reference","previous_headings":"","what":"Global Options","title":"Get and Set Options for a Socket, Context, Stream, Listener or Dialer — opt","text":"'reconnect-time-min' (type 'ms') minimum amount time (milliseconds) wait attempting establish connection previous attempt failed. can set socket, can also overridden individual dialer. option irrelevant listeners. 'reconnect-time-max' (type 'ms') maximum amount time (milliseconds) wait attempting establish connection previous attempt failed. non-zero, time successive connection attempts start value 'reconnect-time-min', grow exponentially, reaches value. value zero, exponential back-connection attempts done, attempt wait time specified 'reconnect-time-min'. can set socket, can also overridden individual dialer. option irrelevant listeners. 'recv-size-max' (type 'size') maximum message size accepted remote peer. peer attempts send message larger , message discarded. value zero, limit message sizes enforced. option exists prevent certain kinds denial--service attacks, malicious agent can claim want send extraordinarily large message, without sending data. option can set socket, may overridden per-dialer per-listener basis. NOTE: Applications hostile networks set non-zero value prevent denial--service attacks. NOTE: transports may message size restrictions. 'recv-buffer' (type 'int') depth socket’s receive buffer number messages. Messages received transport may buffered application accepted delivery. value must integer 0 8192, inclusive. NOTE: protocols support buffering received messages. example req can deal single reply time. 'recv-timeout' (type 'ms') socket receive timeout milliseconds. message available receiving socket period time, receive operations fail return value 5L ('timed '). 'send-buffer' (type 'int') depth socket send buffer number messages. Messages sent application may buffered socket transport ready accept delivery. value must integer 0 8192, inclusive. NOTE: protocols support buffering sent messages; generally multicast protocols like pub simply discard messages delivered immediately. 'send-timeout' (type 'ms') socket send timeout milliseconds. message queued delivery socket period time (send buffers full), operation fail return value 5L ('timed '). 'recv-fd' (type 'int') socket receive file descriptor. supported protocols, become readable message available receiving socket. Attempts made read write returned file descriptor, suitable use poll(), select(), WSAPoll() Windows, similar functions. 'send-fd' (type 'int') socket send file descriptor. Attempts made read write returned file descriptor, suitable use poll(), select(), WSAPoll() Windows, similar functions. 'socket-name' (type 'string') socket name. default string corresponding value socket. string must fit within 64-bytes, including terminating NUL byte. value intended application use, used anything library . 'url' (type 'string') read-option used listener dialer obtain URL configured.","code":""},{"path":"https://nanonext.r-lib.org/reference/opt.html","id":"protocol-specific-options","dir":"Reference","previous_headings":"","what":"Protocol-specific Options","title":"Get and Set Options for a Socket, Context, Stream, Listener or Dialer — opt","text":"'req:resend-time' (type 'ms') (Request protocol) new request started, timer duration also started. reply received timer expires, request resent. (Requests also automatically resent peer original request sent disconnects, peer becomes available requester waiting available peer.) 'sub:subscribe' (type 'string') (Subscribe protocol) option registers topic subscriber interested . incoming message checked list subscribed topics. body begins entire set bytes topic, message accepted. topic matches, message discarded. receive messages, set topic NULL. 'sub:unsubscribe' (type 'string') (Subscribe protocol) option removes topic subscription list. Note topic previously subscribed 'sub:subscribe' 'entry found' error result. 'sub:prefnew' (type 'bool') (Subscribe protocol) option specifies behavior subscriber queue full. TRUE (default), subscriber make room queue removing oldest message. FALSE, subscriber reject messages message queue room. 'surveyor:survey-time' (type 'ms') (Surveyor protocol) Duration surveys. new survey started, timer duration also started. responses arriving time discarded. Attempts receive timer expires surveys started result 'incorrect state' error. Attempts receive timer expires result 'timed ' error.","code":""},{"path":"https://nanonext.r-lib.org/reference/opt.html","id":"transport-specific-options","dir":"Reference","previous_headings":"","what":"Transport-specific Options","title":"Get and Set Options for a Socket, Context, Stream, Listener or Dialer — opt","text":"'ipc:permissions' (type 'int') (IPC transport) option may applied listener configure permissions used UNIX domain socket created listener. property supported POSIX systems. value type int, representing normal permission bits file, 0600 (typically meaning read-write owner, permissions anyone else.) default system-specific, often 0644. 'tcp-nodelay' (type 'bool') (TCP transport) option used disable (enable) use Nagle's algorithm TCP connections. TRUE (default), messages sent immediately underlying TCP stream without waiting gather data. FALSE, Nagle’s algorithm enabled, TCP stream may wait briefly attempt coalesce messages. Nagle’s algorithm useful low-bandwidth connections reduce overhead, comes cost latency. used dialer listener, value affects newly created connections configured. 'tcp-keepalive' (type 'bool') (TCP transport) option used enable sending keep-alive messages underlying TCP stream. option FALSE default. enabled, messages seen period time, zero length TCP message sent ACK flag set attempt tickle traffic peer. none still seen (platform-specific number retries timeouts), remote peer presumed dead, connection closed. used dialer listener, value affects newly created connections configured. option two purposes. First, can used detect dead peers otherwise quiescent network. Second, can used keep connection table entries NAT middleware expiring due lack activity. 'tcp-bound-port' (type 'int') (TCP transport) Local TCP port number. used listener, intended used starting listener combination wildcard (0) local port. determines actual ephemeral port selected bound. value provided integer, low order 16 bits set, native byte order convenience. 'ws:request-headers' (type 'string') (WebSocket transport) Concatenation multiple lines terminated CRLF sequences, can used add headers HTTP request sent connecting. option can set dialers, must done transport started. 'ws:response-headers' (type 'string') (WebSocket transport) Concatenation multiple lines terminated CRLF sequences, can used add headers HTTP response sent connecting. option can set listeners, must done transport started. 'ws:request-uri' (type 'string') (WebSocket transport) obtaining URI sent client. can useful handler supports entire directory tree.","code":""},{"path":"https://nanonext.r-lib.org/reference/opt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get and Set Options for a Socket, Context, Stream, Listener or Dialer — opt","text":"","code":"s <- socket(\"pair\") opt(s, \"send-buffer\") #> [1] 0 close(s)  s <- socket(\"req\") ctx <- context(s) opt(ctx, \"send-timeout\") #> [1] -1 close(ctx) close(s)  s <- socket(\"pair\", dial = \"inproc://nanonext\", autostart = FALSE) opt(s$dialer[[1]], \"reconnect-time-min\") #> [1] 1000 close(s)  s <- socket(\"pair\", listen = \"inproc://nanonext\", autostart = FALSE) opt(s$listener[[1]], \"recv-size-max\") #> [1] 0 close(s)  s <- socket(\"pair\") opt(s, \"recv-timeout\") <- 2000 close(s)  s <- socket(\"req\") ctx <- context(s) opt(ctx, \"send-timeout\") <- 2000 close(ctx) close(s)  s <- socket(\"pair\", dial = \"inproc://nanonext\", autostart = FALSE) opt(s$dialer[[1]], \"reconnect-time-min\") <- 2000 start(s$dialer[[1]]) close(s)  s <- socket(\"pair\", listen = \"inproc://nanonext\", autostart = FALSE) opt(s$listener[[1]], \"recv-size-max\") <- 1024 start(s$listener[[1]]) close(s)"},{"path":"https://nanonext.r-lib.org/reference/parse_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse URL — parse_url","title":"Parse URL — parse_url","text":"Parses character string containing RFC 3986 compliant URL per NNG.","code":""},{"path":"https://nanonext.r-lib.org/reference/parse_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse URL — parse_url","text":"","code":"parse_url(url)"},{"path":"https://nanonext.r-lib.org/reference/parse_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse URL — parse_url","text":"url character string containing URL.","code":""},{"path":"https://nanonext.r-lib.org/reference/parse_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse URL — parse_url","text":"named character vector length 10, comprising: rawurl - unparsed URL string. scheme - URL scheme, \"http\" \"inproc\" (always lower case). userinfo - username password supplied URL string. host - full host part URL, including port present (separated colon). hostname - name host. port - port (specified, default port defined scheme). path - path, typically used HTTP WebSocket. query - query info (typically following ? URL). fragment - used specifying anchor, part # URL. requri - full Request-URI (path[?query][#fragment]). Values determined represented empty string \"\".","code":""},{"path":"https://nanonext.r-lib.org/reference/parse_url.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse URL — parse_url","text":"","code":"parse_url(\"https://user:password@w3.org:8080/type/path?q=info#intro\") #>                                                     rawurl  #> \"https://user:password@w3.org:8080/type/path?q=info#intro\"  #>                                                     scheme  #>                                                    \"https\"  #>                                                   userinfo  #>                                            \"user:password\"  #>                                                       host  #>                                              \"w3.org:8080\"  #>                                                   hostname  #>                                                   \"w3.org\"  #>                                                       port  #>                                                     \"8080\"  #>                                                       path  #>                                               \"/type/path\"  #>                                                      query  #>                                                   \"q=info\"  #>                                                   fragment  #>                                                    \"intro\"  #>                                                     requri  #>                                  \"/type/path?q=info#intro\"  parse_url(\"tcp://192.168.0.2:5555\") #>                   rawurl                   scheme  #> \"tcp://192.168.0.2:5555\"                    \"tcp\"  #>                 userinfo                     host  #>                       \"\"       \"192.168.0.2:5555\"  #>                 hostname                     port  #>            \"192.168.0.2\"                   \"5555\"  #>                     path                    query  #>                       \"\"                       \"\"  #>                 fragment                   requri  #>                       \"\"                       \"\""},{"path":"https://nanonext.r-lib.org/reference/pipe_notify.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe Notify — pipe_notify","title":"Pipe Notify — pipe_notify","text":"Signals 'conditionVariable' whenever pipes (individual connections) added removed socket.","code":""},{"path":"https://nanonext.r-lib.org/reference/pipe_notify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe Notify — pipe_notify","text":"","code":"pipe_notify(socket, cv, add = FALSE, remove = FALSE, flag = FALSE)"},{"path":"https://nanonext.r-lib.org/reference/pipe_notify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe Notify — pipe_notify","text":"socket Socket. cv 'conditionVariable' signal, NULL cancel previously set signal. add [default FALSE] logical value whether signal (cancel signal) pipe added. remove [default FALSE] logical value whether signal (cancel signal) pipe removed. flag [default FALSE] logical value whether also set flag 'conditionVariable'. can help distinguish different types signal, causes subsequent wait() return FALSE instead TRUE. signal tools package, e.g. tools::SIGINT, equivalent integer value supplied, sets flag additionally raises signal upon flag set.","code":""},{"path":"https://nanonext.r-lib.org/reference/pipe_notify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe Notify — pipe_notify","text":"Invisibly, zero success (otherwise error).","code":""},{"path":"https://nanonext.r-lib.org/reference/pipe_notify.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pipe Notify — pipe_notify","text":"add: event occurs pipe fully added socket. Prior time, possible communicate pipe socket. remove: event occurs pipe removed socket. underlying transport may closed point, possible communicate using pipe.","code":""},{"path":"https://nanonext.r-lib.org/reference/pipe_notify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipe Notify — pipe_notify","text":"","code":"s <- socket(listen = \"inproc://nanopipe\") cv <- cv()  pipe_notify(s, cv, add = TRUE, remove = TRUE, flag = TRUE) cv_value(cv) #> [1] 0  s1 <- socket(dial = \"inproc://nanopipe\") cv_value(cv) #> [1] 1 reap(s1) #> [1] 0 cv_value(cv) #> [1] 2  pipe_notify(s, NULL, add = TRUE, remove = TRUE) s1 <- socket(dial = \"inproc://nanopipe\") cv_value(cv) #> [1] 2 reap(s1) #> [1] 0  (wait(cv)) #> [1] FALSE  close(s)"},{"path":"https://nanonext.r-lib.org/reference/protocols.html","id":null,"dir":"Reference","previous_headings":"","what":"Protocols (Documentation) — protocols","title":"Protocols (Documentation) — protocols","text":"Protocols implemented nanonext. authoritative guide please refer online documentation NNG library https://nng.nanomsg.org/man/.","code":""},{"path":"https://nanonext.r-lib.org/reference/protocols.html","id":"bus-mesh-networks-","dir":"Reference","previous_headings":"","what":"Bus (mesh networks)","title":"Protocols (Documentation) — protocols","text":"[protocol, bus] bus protocol useful routing applications building mesh networks every peer connected every peer. protocol, message sent node sent every one directly-connected peers. protocol may used send receive messages. Sending messages attempt deliver directly connected peer. Indirectly-connected peers receive messages. using protocol build mesh networks, therefore important fully-connected mesh network constructed. message delivery pattern best-effort, means peers may receive messages. Furthermore, delivery may occur , , none directly connected peers (messages delivered peer nodes unable receive). Hence, send operations never block; instead message delivered reason discarded.","code":""},{"path":"https://nanonext.r-lib.org/reference/protocols.html","id":"pair-two-way-radio-","dir":"Reference","previous_headings":"","what":"Pair (two-way radio)","title":"Protocols (Documentation) — protocols","text":"[protocol, pair] NNG's pair v0. pair protocol implements peer--peer pattern, relationships peers one--one. one peer may connected another peer time, may send receive messages freely. Normally, pattern block attempting send message peer able receive message.","code":""},{"path":"https://nanonext.r-lib.org/reference/protocols.html","id":"poly-one-to-one-of-many-","dir":"Reference","previous_headings":"","what":"Poly (one-to-one of many)","title":"Protocols (Documentation) — protocols","text":"[protocol, poly] NNG's pair v1 polyamorous mode. allows socket communicate multiple directly-connected peers. remote peer specified sender, protocol willselect available connected peer. peer given pipe able receive (pipe longer available, peer disconnected), message discarded notification sender.","code":""},{"path":"https://nanonext.r-lib.org/reference/protocols.html","id":"push-pull-one-way-pipeline-","dir":"Reference","previous_headings":"","what":"Push/Pull (one-way pipeline)","title":"Protocols (Documentation) — protocols","text":"pipeline pattern, pushers distribute messages pullers, hence useful solving producer/consumer problems. multiple peers connected, pattern attempts distribute fairly. message sent pusher sent one peer pullers, chosen round-robin fashion. property makes pattern useful load-balancing scenarios. [protocol, push] push protocol one half pipeline pattern. side pull protocol. [protocol, pull] pull protocol one half pipeline pattern. half push protocol.","code":""},{"path":"https://nanonext.r-lib.org/reference/protocols.html","id":"publisher-subscriber-topics-amp-broadcast-","dir":"Reference","previous_headings":"","what":"Publisher/Subscriber (topics & broadcast)","title":"Protocols (Documentation) — protocols","text":"publisher/subscriber pattern, publisher sends data, broadcast subscribers. subscriber see data subscribed. [protocol, pub] pub protocol one half publisher/subscriber pattern. protocol may used send messages, unable receive . [protocol, sub] sub protocol one half publisher/subscriber pattern. protocol may used receive messages, unable send .","code":""},{"path":"https://nanonext.r-lib.org/reference/protocols.html","id":"request-reply-rpc-","dir":"Reference","previous_headings":"","what":"Request/Reply (RPC)","title":"Protocols (Documentation) — protocols","text":"request/reply pattern, requester sends message one replier, expected reply single answer. used synchronous communications, example remote procedure calls (RPCs). request resent automatically reply arrives, reply received request times . [protocol, req] req protocol one half request/reply pattern. socket may used send messages (requests), receive replies. Generally reply can received sending request. [protocol, rep] rep protocol one half request/reply pattern. socket may used receive messages (requests), send replies. Generally reply can sent receiving request.","code":""},{"path":"https://nanonext.r-lib.org/reference/protocols.html","id":"surveyor-respondent-voting-amp-service-discovery-","dir":"Reference","previous_headings":"","what":"Surveyor/Respondent (voting & service discovery)","title":"Protocols (Documentation) — protocols","text":"survey pattern, surveyor sends survey, broadcast peer respondents. respondents chance reply (obliged). survey timed event, responses received survey finished discarded. [protocol, surveyor] surveyor protocol one half survey pattern. protocol may used send messages (surveys), receive replies. reply can received sending survey. surveyor can normally expect receive one reply responder (messages may duplicated topologies, guarantee ). [protocol, respondent] respondent protocol one half survey pattern. protocol may used receive messages, send replies. reply can sent receiving survey, generally reply sent surveyor last survey received.","code":""},{"path":"https://nanonext.r-lib.org/reference/random.html","id":null,"dir":"Reference","previous_headings":"","what":"Random Data Generation — random","title":"Random Data Generation — random","text":"Strictly use statistical analysis. Non-reproducible unknown statistical properties. Provides alternative source randomness Mbed TLS library purposes cryptographic key generation. Mbed TLS uses block-cipher counter mode operation, defined NIST SP800-90A: Recommendation Random Number Generation Using Deterministic Random Bit Generators. implementation uses AES-256 underlying block cipher, derivation function, entropy collector combining entropy multiple sources including least one strong entropy source.","code":""},{"path":"https://nanonext.r-lib.org/reference/random.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random Data Generation — random","text":"","code":"random(n = 1L, convert = TRUE)"},{"path":"https://nanonext.r-lib.org/reference/random.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random Data Generation — random","text":"n [default 1L] integer random bytes generate (0 1024), coerced integer required. vector, first element taken. convert [default TRUE] logical FALSE return raw vector, TRUE return hex representation bytes character string.","code":""},{"path":"https://nanonext.r-lib.org/reference/random.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random Data Generation — random","text":"length n raw vector, length one vector 2n random characters, depending value convert supplied.","code":""},{"path":"https://nanonext.r-lib.org/reference/random.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Random Data Generation — random","text":"Results obtained independent alter state R's pseudo-random number generators.","code":""},{"path":"https://nanonext.r-lib.org/reference/random.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random Data Generation — random","text":"","code":"random() #> [1] \"62\" random(8L) #> [1] \"1272e55b6e1803d5\" random(n = 8L, convert = FALSE) #> [1] 6c 37 8a 7d 33 15 16 0c"},{"path":"https://nanonext.r-lib.org/reference/reap.html","id":null,"dir":"Reference","previous_headings":"","what":"Reap — reap","title":"Reap — reap","text":"alternative close Sockets, Contexts, Listeners, Dialers avoiding S3 method dispatch.","code":""},{"path":"https://nanonext.r-lib.org/reference/reap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reap — reap","text":"","code":"reap(con)"},{"path":"https://nanonext.r-lib.org/reference/reap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reap — reap","text":"con Socket, Context, Listener Dialer.","code":""},{"path":"https://nanonext.r-lib.org/reference/reap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reap — reap","text":"integer exit code (zero success).","code":""},{"path":"https://nanonext.r-lib.org/reference/reap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reap — reap","text":"May used unclassed external pointers e.g. created .context(). Returns silently warn error, update state object attributes.","code":""},{"path":[]},{"path":"https://nanonext.r-lib.org/reference/reap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reap — reap","text":"","code":"s <- socket(\"req\") listen(s) dial(s) ctx <- .context(s)  reap(ctx) #> [1] 0 reap(s[[\"dialer\"]][[1]]) #> [1] 0 reap(s[[\"listener\"]][[1]]) #> [1] 0 reap(s) #> [1] 0 reap(s) #> 'errorValue' int 7 | Object closed"},{"path":"https://nanonext.r-lib.org/reference/recv.html","id":null,"dir":"Reference","previous_headings":"","what":"Receive — recv","title":"Receive — recv","text":"Receive data connection (Socket, Context Stream).","code":""},{"path":"https://nanonext.r-lib.org/reference/recv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Receive — recv","text":"","code":"recv(   con,   mode = c(\"serial\", \"character\", \"complex\", \"double\", \"integer\", \"logical\", \"numeric\",     \"raw\", \"string\"),   block = NULL,   n = 65536L )"},{"path":"https://nanonext.r-lib.org/reference/recv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Receive — recv","text":"con Socket, Context Stream. mode [default 'serial'] character value integer equivalent - one \"serial\" (1L), \"character\" (2L), \"complex\" (3L), \"double\" (4L), \"integer\" (5L), \"logical\" (6L), \"numeric\" (7L), \"raw\" (8L), \"string\" (9L). default \"serial\" means serialised R object; modes, received bytes converted respective mode. \"string\" faster option length one character vectors. Streams, \"serial\" option default \"character\". block [default NULL] applies connection default (see section 'Blocking' ). Specify logical TRUE block successful FALSE return immediately even unsuccessful (e.g. connection available), else integer value specifying maximum time block milliseconds, operation time . n [default 65536L] applicable Streams , maximum number bytes receive. Can -estimate, note buffer size reserved.","code":""},{"path":"https://nanonext.r-lib.org/reference/recv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Receive — recv","text":"received data mode specified.","code":""},{"path":"https://nanonext.r-lib.org/reference/recv.html","id":"errors","dir":"Reference","previous_headings":"","what":"Errors","title":"Receive — recv","text":"case error, integer 'errorValue' returned (distiguishable integer message value). can verified using is_error_value(). error occurred unserialization conversion message data specified mode, raw vector returned instead allow recovery (accompanied warning).","code":""},{"path":"https://nanonext.r-lib.org/reference/recv.html","id":"blocking","dir":"Reference","previous_headings":"","what":"Blocking","title":"Receive — recv","text":"Sockets Contexts: default behaviour non-blocking block = FALSE. return immediately error messages available. Streams: default behaviour blocking block = TRUE. wait message received. Set timeout ensure function returns scenarios. underlying implementation uses asynchronous receive wait, recommended set small positive value block rather FALSE.","code":""},{"path":[]},{"path":"https://nanonext.r-lib.org/reference/recv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Receive — recv","text":"","code":"s1 <- socket(\"pair\", listen = \"inproc://nanonext\") s2 <- socket(\"pair\", dial = \"inproc://nanonext\")  send(s1, data.frame(a = 1, b = 2)) #> [1] 0 res <- recv(s2) res #>   a b #> 1 1 2 send(s1, data.frame(a = 1, b = 2)) #> [1] 0 recv(s2) #>   a b #> 1 1 2  send(s1, c(1.1, 2.2, 3.3), mode = \"raw\") #> [1] 0 res <- recv(s2, mode = \"double\", block = 100) res #> [1] 1.1 2.2 3.3 send(s1, \"example message\", mode = \"raw\") #> [1] 0 recv(s2, mode = \"character\") #> [1] \"example message\"  close(s1) close(s2)  req <- socket(\"req\", listen = \"inproc://nanonext\") rep <- socket(\"rep\", dial = \"inproc://nanonext\")  ctxq <- context(req) ctxp <- context(rep) send(ctxq, data.frame(a = 1, b = 2), block = 100) #> [1] 0 recv(ctxp, block = 100) #>   a b #> 1 1 2  send(ctxq, c(1.1, 2.2, 3.3), mode = \"raw\", block = 100) #> [1] 0 recv(ctxp, mode = \"double\", block = 100) #> [1] 1.1 2.2 3.3  close(req) close(rep)"},{"path":"https://nanonext.r-lib.org/reference/recv_aio.html","id":null,"dir":"Reference","previous_headings":"","what":"Receive Async — recv_aio","title":"Receive Async — recv_aio","text":"Receive data asynchronously connection (Socket, Context Stream).","code":""},{"path":"https://nanonext.r-lib.org/reference/recv_aio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Receive Async — recv_aio","text":"","code":"recv_aio(   con,   mode = c(\"serial\", \"character\", \"complex\", \"double\", \"integer\", \"logical\", \"numeric\",     \"raw\", \"string\"),   timeout = NULL,   cv = NULL,   n = 65536L )"},{"path":"https://nanonext.r-lib.org/reference/recv_aio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Receive Async — recv_aio","text":"con Socket, Context Stream. mode [default 'serial'] character value integer equivalent - one \"serial\" (1L), \"character\" (2L), \"complex\" (3L), \"double\" (4L), \"integer\" (5L), \"logical\" (6L), \"numeric\" (7L), \"raw\" (8L), \"string\" (9L). default \"serial\" means serialised R object; modes, received bytes converted respective mode. \"string\" faster option length one character vectors. Streams, \"serial\" option default \"character\". timeout [default NULL] integer value milliseconds NULL, applies socket-specific default, usually timeout. cv (optional) 'conditionVariable' signal async receive complete. n [default 65536L] applicable Streams , maximum number bytes receive. Can -estimate, note buffer size reserved.","code":""},{"path":"https://nanonext.r-lib.org/reference/recv_aio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Receive Async — recv_aio","text":"'recvAio' (object class 'recvAio') (invisibly).","code":""},{"path":"https://nanonext.r-lib.org/reference/recv_aio.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Receive Async — recv_aio","text":"Async receive always non-blocking returns 'recvAio' immediately. 'recvAio', received message available $data. 'unresolved' logical NA returned async operation yet complete. wait async operation complete retrieve received message, use call_aio() returned 'recvAio' object. Alternatively, stop async operation, use stop_aio(). case error, integer 'errorValue' returned (distiguishable integer message value). can checked using is_error_value(). error occurred unserialization conversion message data specified mode, raw vector returned instead allow recovery (accompanied warning).","code":""},{"path":"https://nanonext.r-lib.org/reference/recv_aio.html","id":"signalling","dir":"Reference","previous_headings":"","what":"Signalling","title":"Receive Async — recv_aio","text":"supplying 'conditionVariable', receive complete, 'conditionVariable' signalled incrementing value 1. happens asynchronously independently R execution thread.","code":""},{"path":[]},{"path":"https://nanonext.r-lib.org/reference/recv_aio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Receive Async — recv_aio","text":"","code":"s1 <- socket(\"pair\", listen = \"inproc://nanonext\") s2 <- socket(\"pair\", dial = \"inproc://nanonext\")  res <- send_aio(s1, data.frame(a = 1, b = 2), timeout = 100) msg <- recv_aio(s2, timeout = 100) msg #> < recvAio | $data > msg$data #>   a b #> 1 1 2  res <- send_aio(s1, c(1.1, 2.2, 3.3), mode = \"raw\", timeout = 100) msg <- recv_aio(s2, mode = \"double\", timeout = 100) msg #> < recvAio | $data > msg$data #> [1] 1.1 2.2 3.3  res <- send_aio(s1, \"example message\", mode = \"raw\", timeout = 100) msg <- recv_aio(s2, mode = \"character\", timeout = 100) call_aio(msg) msg$data #> [1] \"example message\"  close(s1) close(s2)  # Signalling a condition variable  s1 <- socket(\"pair\", listen = \"inproc://cv-example\") cv <- cv() msg <- recv_aio(s1, timeout = 100, cv = cv) until(cv, 10L) msg$data #> 'unresolved' logi NA close(s1)  # in another process in parallel s2 <- socket(\"pair\", dial = \"inproc://cv-example\") res <- send_aio(s2, c(1.1, 2.2, 3.3), mode = \"raw\", timeout = 100) close(s2)"},{"path":"https://nanonext.r-lib.org/reference/reply.html","id":null,"dir":"Reference","previous_headings":"","what":"Reply over Context (RPC Server for Req/Rep Protocol) — reply","title":"Reply over Context (RPC Server for Req/Rep Protocol) — reply","text":"Implements executor/server rep node req/rep protocol. Awaits data, applies arbitrary specified function, returns result caller/client.","code":""},{"path":"https://nanonext.r-lib.org/reference/reply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reply over Context (RPC Server for Req/Rep Protocol) — reply","text":"","code":"reply(   context,   execute,   recv_mode = c(\"serial\", \"character\", \"complex\", \"double\", \"integer\", \"logical\",     \"numeric\", \"raw\", \"string\"),   send_mode = c(\"serial\", \"raw\"),   timeout = NULL,   ... )"},{"path":"https://nanonext.r-lib.org/reference/reply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reply over Context (RPC Server for Req/Rep Protocol) — reply","text":"context Context. execute function takes received (converted) data first argument. Can anonymous function form function(x) (x). Additional arguments can also passed .... recv_mode [default 'serial'] character value integer equivalent - one \"serial\" (1L), \"character\" (2L), \"complex\" (3L), \"double\" (4L), \"integer\" (5L), \"logical\" (6L), \"numeric\" (7L), \"raw\" (8L), \"string\" (9L). default \"serial\" means serialised R object; modes, received bytes converted respective mode. \"string\" faster option length one character vectors. send_mode [default 'serial'] character value integer equivalent - either \"serial\" (1L) send serialised R objects, \"raw\" (2L) send atomic vectors type raw byte vector. timeout [default NULL] integer value milliseconds NULL, applies socket-specific default, usually timeout. Note applies receiving request. total elapsed time also include performing 'execute' received data. timeout also applies sending result (event requestor become unavailable since sending request). ... additional arguments passed function specified 'execute'.","code":""},{"path":"https://nanonext.r-lib.org/reference/reply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reply over Context (RPC Server for Req/Rep Protocol) — reply","text":"Integer exit code (zero success).","code":""},{"path":"https://nanonext.r-lib.org/reference/reply.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reply over Context (RPC Server for Req/Rep Protocol) — reply","text":"Receive block awaiting message arrive usually desired behaviour. Set timeout allow function return data forthcoming. event error either processing messages evaluation function respect data, nul byte 00 (serialized nul byte) sent reply client signal error. distinguishable possible return value. is_nul_byte() can used test nul byte.","code":""},{"path":"https://nanonext.r-lib.org/reference/reply.html","id":"send-modes","dir":"Reference","previous_headings":"","what":"Send Modes","title":"Reply over Context (RPC Server for Req/Rep Protocol) — reply","text":"default mode \"serial\" sends serialised R objects ensure perfect reproducibility within R. receiving, corresponding mode \"serial\" used. Custom serialization unserialization functions reference objects may enabled function serial_config(). Mode \"raw\" sends atomic vectors type raw byte vector, must used interfacing external applications raw system sockets, R serialization use. receiving, mode corresponding vector sent used.","code":""},{"path":"https://nanonext.r-lib.org/reference/reply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reply over Context (RPC Server for Req/Rep Protocol) — reply","text":"","code":"req <- socket(\"req\", listen = \"inproc://req-example\") rep <- socket(\"rep\", dial = \"inproc://req-example\")  ctxq <- context(req) ctxp <- context(rep)  send(ctxq, 2022, block = 100) #> [1] 0 reply(ctxp, execute = function(x) x + 1, send_mode = \"raw\", timeout = 100) #> [1] 0 recv(ctxq, mode = \"double\", block = 100) #> [1] 2023  send(ctxq, 100, mode = \"raw\", block = 100) #> [1] 0 reply(ctxp, recv_mode = \"double\", execute = log, base = 10, timeout = 100) #> [1] 0 recv(ctxq, block = 100) #> [1] 2  close(req) close(rep)"},{"path":"https://nanonext.r-lib.org/reference/request.html","id":null,"dir":"Reference","previous_headings":"","what":"Request over Context (RPC Client for Req/Rep Protocol) — request","title":"Request over Context (RPC Client for Req/Rep Protocol) — request","text":"Implements caller/client req node req/rep protocol. Sends data rep node (executor/server) returns Aio, can called value required.","code":""},{"path":"https://nanonext.r-lib.org/reference/request.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Request over Context (RPC Client for Req/Rep Protocol) — request","text":"","code":"request(   con,   data,   send_mode = c(\"serial\", \"raw\"),   recv_mode = c(\"serial\", \"character\", \"complex\", \"double\", \"integer\", \"logical\",     \"numeric\", \"raw\", \"string\"),   timeout = NULL,   cv = NULL,   msgid = NULL )"},{"path":"https://nanonext.r-lib.org/reference/request.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Request over Context (RPC Client for Req/Rep Protocol) — request","text":"con 'req' Socket, Context. data object (send_mode = \"raw\", vector). send_mode [default 'serial'] character value integer equivalent - either \"serial\" (1L) send serialised R objects, \"raw\" (2L) send atomic vectors type raw byte vector. recv_mode [default 'serial'] character value integer equivalent - one \"serial\" (1L), \"character\" (2L), \"complex\" (3L), \"double\" (4L), \"integer\" (5L), \"logical\" (6L), \"numeric\" (7L), \"raw\" (8L), \"string\" (9L). default \"serial\" means serialised R object; modes, received bytes converted respective mode. \"string\" faster option length one character vectors. timeout [default NULL] integer value milliseconds NULL, applies socket-specific default, usually timeout. cv (optional) 'conditionVariable' signal async receive complete, NULL. value supplied, cause pipe connection dropped async receive complete. msgid (optional) integer message ID send special payload context upon timeout (asynchronously) consisting integer zero, followed value msgid supplied.","code":""},{"path":"https://nanonext.r-lib.org/reference/request.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Request over Context (RPC Client for Req/Rep Protocol) — request","text":"'recvAio' (object class 'mirai' 'recvAio') (invisibly).","code":""},{"path":"https://nanonext.r-lib.org/reference/request.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Request over Context (RPC Client for Req/Rep Protocol) — request","text":"Sending request receiving result performed async, hence function return immediately 'recvAio' object. Access return value $data. designed process server can run concurrently without blocking client. Optionally use call_aio() 'recvAio' call (wait ) result. error occured server process, nul byte 00 received. allows error easily distinguished NULL return value. is_nul_byte() can used test nul byte. recommended use new context request ensure consistent state tracking. safety, context used request closed references returned 'recvAio' removed object garbage collected.","code":""},{"path":"https://nanonext.r-lib.org/reference/request.html","id":"send-modes","dir":"Reference","previous_headings":"","what":"Send Modes","title":"Request over Context (RPC Client for Req/Rep Protocol) — request","text":"default mode \"serial\" sends serialised R objects ensure perfect reproducibility within R. receiving, corresponding mode \"serial\" used. Custom serialization unserialization functions reference objects may enabled function serial_config(). Mode \"raw\" sends atomic vectors type raw byte vector, must used interfacing external applications raw system sockets, R serialization use. receiving, mode corresponding vector sent used.","code":""},{"path":"https://nanonext.r-lib.org/reference/request.html","id":"signalling","dir":"Reference","previous_headings":"","what":"Signalling","title":"Request over Context (RPC Client for Req/Rep Protocol) — request","text":"supplying 'conditionVariable', receive complete, 'conditionVariable' signalled incrementing value 1. happens asynchronously independently R execution thread.","code":""},{"path":"https://nanonext.r-lib.org/reference/request.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Request over Context (RPC Client for Req/Rep Protocol) — request","text":"","code":"if (FALSE) { # \\dontrun{  # works if req and rep are running in parallel in different processes  req <- socket(\"req\", listen = \"tcp://127.0.0.1:6546\") rep <- socket(\"rep\", dial = \"tcp://127.0.0.1:6546\")  reply(.context(rep), execute = function(x) x + 1, timeout = 50) aio <- request(.context(req), data = 2022) aio$data  close(req) close(rep)  # Signalling a condition variable  req <- socket(\"req\", listen = \"tcp://127.0.0.1:6546\") ctxq <- context(req) cv <- cv() aio <- request(ctxq, data = 2022, cv = cv) until(cv, 10L) close(req)  # The following should be run in another process rep <- socket(\"rep\", dial = \"tcp://127.0.0.1:6546\") ctxp <- context(rep) reply(ctxp, execute = function(x) x + 1) close(rep)  } # }"},{"path":"https://nanonext.r-lib.org/reference/send.html","id":null,"dir":"Reference","previous_headings":"","what":"Send — send","title":"Send — send","text":"Send data connection (Socket, Context Stream).","code":""},{"path":"https://nanonext.r-lib.org/reference/send.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Send — send","text":"","code":"send(con, data, mode = c(\"serial\", \"raw\"), block = NULL, pipe = 0L)"},{"path":"https://nanonext.r-lib.org/reference/send.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Send — send","text":"con Socket, Context Stream. data object (vector, mode = \"raw\"). mode [default 'serial'] character value integer equivalent - either \"serial\" (1L) send serialised R objects, \"raw\" (2L) send atomic vectors type raw byte vector. Streams, \"raw\" option argument ignored. block [default NULL] applies connection default (see section 'Blocking' ). Specify logical TRUE block successful FALSE return immediately even unsuccessful (e.g. connection available), else integer value specifying maximum time block milliseconds, operation time . pipe [default 0L] applicable Sockets using 'poly' protocol, integer pipe ID directing send via specific pipe.","code":""},{"path":"https://nanonext.r-lib.org/reference/send.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Send — send","text":"integer exit code (zero success).","code":""},{"path":"https://nanonext.r-lib.org/reference/send.html","id":"blocking","dir":"Reference","previous_headings":"","what":"Blocking","title":"Send — send","text":"Sockets Contexts: default behaviour non-blocking block = FALSE. return immediately error message queued sending. Certain protocol / transport combinations may limit number messages can queued yet received. Streams: default behaviour blocking block = TRUE. wait send completed. Set timeout ensure function returns scenarios. underlying implementation uses asynchronous send wait, recommended set small positive value block rather FALSE.","code":""},{"path":"https://nanonext.r-lib.org/reference/send.html","id":"send-modes","dir":"Reference","previous_headings":"","what":"Send Modes","title":"Send — send","text":"default mode \"serial\" sends serialised R objects ensure perfect reproducibility within R. receiving, corresponding mode \"serial\" used. Custom serialization unserialization functions reference objects may enabled function serial_config(). Mode \"raw\" sends atomic vectors type raw byte vector, must used interfacing external applications raw system sockets, R serialization use. receiving, mode corresponding vector sent used.","code":""},{"path":[]},{"path":"https://nanonext.r-lib.org/reference/send.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Send — send","text":"","code":"pub <- socket(\"pub\", dial = \"inproc://nanonext\")  send(pub, data.frame(a = 1, b = 2)) #> [1] 0 send(pub, c(10.1, 20.2, 30.3), mode = \"raw\", block = 100) #> [1] 0  close(pub)  req <- socket(\"req\", listen = \"inproc://nanonext\") rep <- socket(\"rep\", dial = \"inproc://nanonext\")  ctx <- context(req) send(ctx, data.frame(a = 1, b = 2), block = 100) #> [1] 0  msg <- recv_aio(rep, timeout = 100) send(ctx, c(1.1, 2.2, 3.3), mode = \"raw\", block = 100) #> [1] 0  close(req) close(rep)"},{"path":"https://nanonext.r-lib.org/reference/send_aio.html","id":null,"dir":"Reference","previous_headings":"","what":"Send Async — send_aio","title":"Send Async — send_aio","text":"Send data asynchronously connection (Socket, Context, Stream Pipe).","code":""},{"path":"https://nanonext.r-lib.org/reference/send_aio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Send Async — send_aio","text":"","code":"send_aio(con, data, mode = c(\"serial\", \"raw\"), timeout = NULL, pipe = 0L)"},{"path":"https://nanonext.r-lib.org/reference/send_aio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Send Async — send_aio","text":"con Socket, Context Stream. data object (vector, mode = \"raw\"). mode [default 'serial'] character value integer equivalent - either \"serial\" (1L) send serialised R objects, \"raw\" (2L) send atomic vectors type raw byte vector. Streams, \"raw\" option argument ignored. timeout [default NULL] integer value milliseconds NULL, applies socket-specific default, usually timeout. pipe [default 0L] applicable Sockets using 'poly' protocol, integer pipe ID directing send via specific pipe.","code":""},{"path":"https://nanonext.r-lib.org/reference/send_aio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Send Async — send_aio","text":"'sendAio' (object class 'sendAio') (invisibly).","code":""},{"path":"https://nanonext.r-lib.org/reference/send_aio.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Send Async — send_aio","text":"Async send always non-blocking returns 'sendAio' immediately. 'sendAio', send result available $result. 'unresolved' logical NA returned async operation yet complete. resolved value zero success, else integer error code. wait check result send operation, use call_aio() returned 'sendAio' object. Alternatively, stop async operation, use stop_aio().","code":""},{"path":"https://nanonext.r-lib.org/reference/send_aio.html","id":"send-modes","dir":"Reference","previous_headings":"","what":"Send Modes","title":"Send Async — send_aio","text":"default mode \"serial\" sends serialised R objects ensure perfect reproducibility within R. receiving, corresponding mode \"serial\" used. Custom serialization unserialization functions reference objects may enabled function serial_config(). Mode \"raw\" sends atomic vectors type raw byte vector, must used interfacing external applications raw system sockets, R serialization use. receiving, mode corresponding vector sent used.","code":""},{"path":[]},{"path":"https://nanonext.r-lib.org/reference/send_aio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Send Async — send_aio","text":"","code":"pub <- socket(\"pub\", dial = \"inproc://nanonext\")  res <- send_aio(pub, data.frame(a = 1, b = 2), timeout = 100) res #> < sendAio | $result > res$result #> [1] 0  res <- send_aio(pub, \"example message\", mode = \"raw\", timeout = 100) call_aio(res)$result #> [1] 0  close(pub)"},{"path":"https://nanonext.r-lib.org/reference/serial_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Serialization Configuration — serial_config","title":"Create Serialization Configuration — serial_config","text":"Returns serialization configuration, may set Socket custom serialization unserialization non-system reference objects, allowing sent received different R sessions. utilises 'refhook' system R native serialization. set, functions apply send receive operations performed mode \"serial\" Socket Context created Socket.","code":""},{"path":"https://nanonext.r-lib.org/reference/serial_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Serialization Configuration — serial_config","text":"","code":"serial_config(class, sfunc, ufunc, vec = FALSE)"},{"path":"https://nanonext.r-lib.org/reference/serial_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Serialization Configuration — serial_config","text":"class character string (vector) class object custom serialization functions applied , e.g. 'ArrowTabular' c('torch_tensor', 'ArrowTabular'). sfunc function (list functions) accepts reference object inheriting class returns raw vector. ufunc function (list functions) accepts raw vector returns reference object. vec specify (retained compatibility removed).","code":""},{"path":"https://nanonext.r-lib.org/reference/serial_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Serialization Configuration — serial_config","text":"list comprising configuration. set Socket using opt<-() option name \"serial\".","code":""},{"path":"https://nanonext.r-lib.org/reference/serial_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Serialization Configuration — serial_config","text":"","code":"cfg <- serial_config(\"test_cls\", function(x) serialize(x, NULL), unserialize) cfg #> [[1]] #> [1] \"test_cls\" #>  #> [[2]] #> [[2]][[1]] #> function (x)  #> serialize(x, NULL) #> <environment: 0x56024173f720> #>  #>  #> [[3]] #> [[3]][[1]] #> function (connection, refhook = NULL)  #> { #>     if (typeof(connection) != \"raw\" && !is.character(connection) &&  #>         !inherits(connection, \"connection\"))  #>         stop(\"'connection' must be a connection\") #>     .Internal(unserialize(connection, refhook)) #> } #> <bytecode: 0x560241733b10> #> <environment: namespace:base> #>  #>   cfg <- serial_config(   c(\"class_one\", \"class_two\"),   list(function(x) serialize(x, NULL), function(x) serialize(x, NULL)),   list(unserialize, unserialize) ) cfg #> [[1]] #> [1] \"class_one\" \"class_two\" #>  #> [[2]] #> [[2]][[1]] #> function (x)  #> serialize(x, NULL) #> <environment: 0x56024173f720> #>  #> [[2]][[2]] #> function (x)  #> serialize(x, NULL) #> <environment: 0x56024173f720> #>  #>  #> [[3]] #> [[3]][[1]] #> function (connection, refhook = NULL)  #> { #>     if (typeof(connection) != \"raw\" && !is.character(connection) &&  #>         !inherits(connection, \"connection\"))  #>         stop(\"'connection' must be a connection\") #>     .Internal(unserialize(connection, refhook)) #> } #> <bytecode: 0x560241733b10> #> <environment: namespace:base> #>  #> [[3]][[2]] #> function (connection, refhook = NULL)  #> { #>     if (typeof(connection) != \"raw\" && !is.character(connection) &&  #>         !inherits(connection, \"connection\"))  #>         stop(\"'connection' must be a connection\") #>     .Internal(unserialize(connection, refhook)) #> } #> <bytecode: 0x560241733b10> #> <environment: namespace:base> #>  #>   s <- socket() opt(s, \"serial\") <- cfg  # provide an empty list to remove registered functions opt(s, \"serial\") <- list()  close(s)"},{"path":"https://nanonext.r-lib.org/reference/socket.html","id":null,"dir":"Reference","previous_headings":"","what":"Open Socket — socket","title":"Open Socket — socket","text":"Open Socket implementing protocol, optionally dial (establish outgoing connection) listen (accept incoming connection) address.","code":""},{"path":"https://nanonext.r-lib.org/reference/socket.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open Socket — socket","text":"","code":"socket(   protocol = c(\"bus\", \"pair\", \"poly\", \"push\", \"pull\", \"pub\", \"sub\", \"req\", \"rep\",     \"surveyor\", \"respondent\"),   dial = NULL,   listen = NULL,   tls = NULL,   autostart = TRUE,   raw = FALSE )"},{"path":"https://nanonext.r-lib.org/reference/socket.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open Socket — socket","text":"protocol [default 'bus'] choose protocol - \"bus\", \"pair\", \"poly\", \"push\", \"pull\", \"pub\", \"sub\", \"req\", \"rep\", \"surveyor\", \"respondent\" - see protocols. dial (optional) URL dial, specifying transport address character string e.g. 'inproc://anyvalue' 'tcp://127.0.0.1:5555' (see transports). listen (optional) URL listen , specifying transport address character string e.g. 'inproc://anyvalue' 'tcp://127.0.0.1:5555' (see transports). tls [default NULL] secure tls+tcp:// wss:// connections , provide TLS configuration object created tls_config(). autostart [default TRUE] whether start dialer/listener. Set FALSE setting configuration options dialer/listener generally possible change started. dialers : set NA start synchronously - less resilient connection immediately possible, avoids subtle errors attempting use socket asynchronous dial completed. raw [default FALSE] whether open raw mode sockets. Note: general use - enable unless specific need (refer NNG documentation).","code":""},{"path":"https://nanonext.r-lib.org/reference/socket.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open Socket — socket","text":"Socket (object class 'nanoSocket' 'nano').","code":""},{"path":"https://nanonext.r-lib.org/reference/socket.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Open Socket — socket","text":"NNG presents socket view networking. sockets constructed using protocol-specific functions, given socket implements precisely one protocol. socket may used send receive messages (protocol supports , implements appropriate protocol semantics). example, sub sockets automatically filter incoming messages discard topics subscribed. function (optionally) binds single Dialer /Listener Socket. complex network topologies may created binding Dialers / Listeners Socket required using dial() listen(). New contexts may also created using context() protocol supports .","code":""},{"path":"https://nanonext.r-lib.org/reference/socket.html","id":"protocols","dir":"Reference","previous_headings":"","what":"Protocols","title":"Open Socket — socket","text":"following Scalability Protocols (communication patterns) implemented: Bus (mesh networks) - protocol: 'bus' Pair (two-way radio) - protocol: 'pair' Poly (one--one many) - protocol: 'poly' Pipeline (one-way pipe) - protocol: 'push', 'pull' Publisher/Subscriber (topics & broadcast) - protocol: 'pub', 'sub' Request/Reply (RPC) - protocol: 'req', 'rep' Survey (voting & service discovery) - protocol: 'surveyor', 'respondent' Please see protocols documentation.","code":""},{"path":"https://nanonext.r-lib.org/reference/socket.html","id":"transports","dir":"Reference","previous_headings":"","what":"Transports","title":"Open Socket — socket","text":"following communications transports may used: Inproc (-process) - url: 'inproc://' IPC (inter-process communications) - url: 'ipc://' ('abstract://' Linux) TCP TLS TCP - url: 'tcp://' 'tls+tcp://' WebSocket TLS WebSocket - url: 'ws://' 'wss://' Please see transports documentation.","code":""},{"path":"https://nanonext.r-lib.org/reference/socket.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Open Socket — socket","text":"","code":"s <- socket(protocol = \"req\", listen = \"inproc://nanosocket\") s #> < nanoSocket > #>  - id: 45 #>  - state: opened #>  - protocol: req #>  - listener: #>     inproc://nanosocket s1 <- socket(protocol = \"rep\", dial = \"inproc://nanosocket\") s1 #> < nanoSocket > #>  - id: 46 #>  - state: opened #>  - protocol: rep #>  - dialer: #>     inproc://nanosocket  send(s, \"hello world!\") #> [1] 0 recv(s1) #> [1] \"hello world!\"  close(s1) close(s)"},{"path":"https://nanonext.r-lib.org/reference/start.html","id":null,"dir":"Reference","previous_headings":"","what":"Start Listener/Dialer — start","title":"Start Listener/Dialer — start","text":"Start Listener/Dialer.","code":""},{"path":"https://nanonext.r-lib.org/reference/start.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Start Listener/Dialer — start","text":"","code":"# S3 method for class 'nanoListener' start(x, ...)  # S3 method for class 'nanoDialer' start(x, async = TRUE, ...)"},{"path":"https://nanonext.r-lib.org/reference/start.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Start Listener/Dialer — start","text":"x Listener Dialer. ... used. async [default TRUE] (applicable Dialers ) logical flag whether connection attempt, including name resolution, made asynchronously. behaviour resilient, also generally makes diagnosing failures somewhat difficult. FALSE, failure, connection refused, returned immediately, action taken.","code":""},{"path":"https://nanonext.r-lib.org/reference/start.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Start Listener/Dialer — start","text":"Invisibly, integer exit code (zero success).","code":""},{"path":"https://nanonext.r-lib.org/reference/stat.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Statistic for a Socket, Listener or Dialer — stat","title":"Get Statistic for a Socket, Listener or Dialer — stat","text":"Obtain value statistic Socket, Listener Dialer. function exposes stats interface NNG.","code":""},{"path":"https://nanonext.r-lib.org/reference/stat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Statistic for a Socket, Listener or Dialer — stat","text":"","code":"stat(object, name)"},{"path":"https://nanonext.r-lib.org/reference/stat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Statistic for a Socket, Listener or Dialer — stat","text":"object Socket, Listener Dialer. name character name statistic return.","code":""},{"path":"https://nanonext.r-lib.org/reference/stat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Statistic for a Socket, Listener or Dialer — stat","text":"value statistic (character double depending type statistic requested) available, else NULL.","code":""},{"path":"https://nanonext.r-lib.org/reference/stat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Statistic for a Socket, Listener or Dialer — stat","text":"Note: values individual statistics guaranteed atomic, due way statistics collected may discrepancies times. example, statistics counting bytes messages received may reflect number messages, depending snapshot taken. potential inconsistency arises result optimisations minimise impact statistics actual operations.","code":""},{"path":"https://nanonext.r-lib.org/reference/stat.html","id":"stats","dir":"Reference","previous_headings":"","what":"Stats","title":"Get Statistic for a Socket, Listener or Dialer — stat","text":"following stats may requested Socket: 'id' - numeric id socket. 'name' - character socket name. 'protocol' - character protocol type e.g. 'bus'. 'pipes' - numeric number pipes (active connections). 'dialers' - numeric number listeners attached socket. 'listeners' - numeric number dialers attached socket. following stats may requested Listener / Dialer: 'id' - numeric id listener / dialer. 'socket' - numeric id socket listener / dialer. 'url' - character URL address. 'pipes' - numeric number pipes (active connections). following additional stats may requested Listener: 'accept' - numeric total number connection attempts, whether successful . 'reject' - numeric total number rejected connection attempts e.g. due incompatible protocols. following additional stats may requested Dialer: 'connect' - numeric total number connection attempts, whether successful . 'reject' - numeric total number rejected connection attempts e.g. due incompatible protocols. 'refused' - numeric total number refused connections e.g. starting synchronously listener side.","code":""},{"path":"https://nanonext.r-lib.org/reference/stat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Statistic for a Socket, Listener or Dialer — stat","text":"","code":"s <- socket(\"bus\", listen = \"inproc://stats\") stat(s, \"pipes\") #> [1] 0  s1 <- socket(\"bus\", dial = \"inproc://stats\") stat(s, \"pipes\") #> [1] 1  close(s1) stat(s, \"pipes\") #> [1] 0  close(s)"},{"path":"https://nanonext.r-lib.org/reference/status_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate HTTP Status Codes — status_code","title":"Translate HTTP Status Codes — status_code","text":"Provides explanation HTTP response status codes (range 100 599). status code defined per RFC 9110, \"Unknown HTTP Status\" returned - may custom code used server.","code":""},{"path":"https://nanonext.r-lib.org/reference/status_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate HTTP Status Codes — status_code","text":"","code":"status_code(x)"},{"path":"https://nanonext.r-lib.org/reference/status_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate HTTP Status Codes — status_code","text":"x numeric HTTP status code translate.","code":""},{"path":"https://nanonext.r-lib.org/reference/status_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translate HTTP Status Codes — status_code","text":"character vector comprising status code explanation separated '|'.","code":""},{"path":"https://nanonext.r-lib.org/reference/status_code.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Translate HTTP Status Codes — status_code","text":"","code":"status_code(200) #> [1] \"200 | OK\" status_code(404) #> [1] \"404 | Not Found\""},{"path":"https://nanonext.r-lib.org/reference/stop_aio.html","id":null,"dir":"Reference","previous_headings":"","what":"Stop Asynchronous Aio Operation — stop_aio","title":"Stop Asynchronous Aio Operation — stop_aio","text":"Stop asynchronous Aio operation, list Aio operations.","code":""},{"path":"https://nanonext.r-lib.org/reference/stop_aio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stop Asynchronous Aio Operation — stop_aio","text":"","code":"stop_aio(x)"},{"path":"https://nanonext.r-lib.org/reference/stop_aio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stop Asynchronous Aio Operation — stop_aio","text":"x Aio list Aios (objects class 'sendAio', 'recvAio' 'ncurlAio').","code":""},{"path":"https://nanonext.r-lib.org/reference/stop_aio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stop Asynchronous Aio Operation — stop_aio","text":"Invisible NULL.","code":""},{"path":"https://nanonext.r-lib.org/reference/stop_aio.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Stop Asynchronous Aio Operation — stop_aio","text":"Stops asynchronous /O operation associated Aio x aborting, waits complete completely aborted, callback associated Aio completed executing. successful, Aio resolve 'errorValue' 20 (Operation canceled). Note function operates silently error even x active Aio, always returning invisible NULL.","code":""},{"path":"https://nanonext.r-lib.org/reference/stream.html","id":null,"dir":"Reference","previous_headings":"","what":"Open Stream — stream","title":"Open Stream — stream","text":"Open Stream either dialing (establishing outgoing connection) listening (accepting incoming connection) address. low-level interface intended communicating non-NNG endpoints.","code":""},{"path":"https://nanonext.r-lib.org/reference/stream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open Stream — stream","text":"","code":"stream(dial = NULL, listen = NULL, textframes = FALSE, tls = NULL)"},{"path":"https://nanonext.r-lib.org/reference/stream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open Stream — stream","text":"dial URL dial, specifying transport address character string e.g. 'ipc:///tmp/anyvalue' 'tcp://127.0.0.1:5555' (transports supported). listen URL listen , specifying transport address character string e.g. 'ipc:///tmp/anyvalue' 'tcp://127.0.0.1:5555' (transports supported). textframes [default FALSE] applicable websocket transport , enables sending receiving TEXT frames (ignored otherwise). tls (optional) applicable secure websockets , client server TLS configuration object created tls_config(). missing NULL, certificates validated.","code":""},{"path":"https://nanonext.r-lib.org/reference/stream.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open Stream — stream","text":"Stream (object class 'nanoStream' 'nano').","code":""},{"path":"https://nanonext.r-lib.org/reference/stream.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Open Stream — stream","text":"Stream used raw byte stream connections. Byte streams reliable data delivered order, portions missing. Can used dial (secure) websocket address starting 'ws://' 'wss://'. often case textframes needs set TRUE. Specify one dial listen. specified, listen ignored. Closing stream renders invalid attempting perform additional operations error.","code":""},{"path":"https://nanonext.r-lib.org/reference/stream.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Open Stream — stream","text":"","code":"# Will succeed only if there is an open connection at the address: s <- tryCatch(stream(dial = \"tcp://127.0.0.1:5555\"), error = identity) s #> <simpleError in stream(dial = \"tcp://127.0.0.1:5555\"): 6 | Connection refused> if (FALSE) { # interactive() # Run in interactive sessions only as connection is not always available: s <- tryCatch(   stream(dial = \"wss://echo.websocket.events/\", textframes = TRUE),   error = identity ) s if (is_nano(s)) recv(s) if (is_nano(s)) send(s, \"hello\") if (is_nano(s)) recv(s) if (is_nano(s)) close(s) }"},{"path":"https://nanonext.r-lib.org/reference/subscribe.html","id":null,"dir":"Reference","previous_headings":"","what":"Subscribe / Unsubscribe Topic — subscribe","title":"Subscribe / Unsubscribe Topic — subscribe","text":"socket context using sub protocol publisher/subscriber pattern. Set topic subscribe , remove topic subscription list.","code":""},{"path":"https://nanonext.r-lib.org/reference/subscribe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subscribe / Unsubscribe Topic — subscribe","text":"","code":"subscribe(con, topic = NULL)  unsubscribe(con, topic = NULL)"},{"path":"https://nanonext.r-lib.org/reference/subscribe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subscribe / Unsubscribe Topic — subscribe","text":"con Socket Context using 'sub' protocol. topic [default NULL] atomic type NULL. default NULL subscribes topics / unsubscribes topics (topics previously subscribed).","code":""},{"path":"https://nanonext.r-lib.org/reference/subscribe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subscribe / Unsubscribe Topic — subscribe","text":"Invisibly, passed Socket Context.","code":""},{"path":"https://nanonext.r-lib.org/reference/subscribe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Subscribe / Unsubscribe Topic — subscribe","text":"use pub/sub publisher must: specify mode = 'raw' sending. ensure sent vector starts topic. subscriber receive specifying correct mode.","code":""},{"path":"https://nanonext.r-lib.org/reference/subscribe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subscribe / Unsubscribe Topic — subscribe","text":"","code":"pub <- socket(\"pub\", listen = \"inproc://nanonext\") sub <- socket(\"sub\", dial = \"inproc://nanonext\")  subscribe(sub, \"examples\")  send(pub, c(\"examples\", \"this is an example\"), mode = \"raw\") #> [1] 0 recv(sub, \"character\") #> [1] \"examples\"           \"this is an example\" send(pub, \"examples will also be received\", mode = \"raw\") #> [1] 0 recv(sub, \"character\") #> [1] \"examples will also be received\" send(pub, c(\"other\", \"this other topic will not be received\"), mode = \"raw\") #> [1] 0 recv(sub, \"character\") #> 'errorValue' int 8 | Try again unsubscribe(sub, \"examples\") send(pub, c(\"examples\", \"this example is no longer received\"), mode = \"raw\") #> [1] 0 recv(sub, \"character\") #> 'errorValue' int 8 | Try again  subscribe(sub, 2) send(pub, c(2, 10, 10, 20), mode = \"raw\") #> [1] 0 recv(sub, \"double\") #> [1]  2 10 10 20 unsubscribe(sub, 2) send(pub, c(2, 10, 10, 20), mode = \"raw\") #> [1] 0 recv(sub, \"double\") #> 'errorValue' int 8 | Try again  close(pub) close(sub)"},{"path":"https://nanonext.r-lib.org/reference/survey_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Survey Time — survey_time","title":"Set Survey Time — survey_time","text":"socket context using surveyor protocol surveyor/respondent pattern. Set survey timeout milliseconds (remains valid subsequent surveys). Messages received surveyor timer ended discarded.","code":""},{"path":"https://nanonext.r-lib.org/reference/survey_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Survey Time — survey_time","text":"","code":"survey_time(con, value = 1000L)"},{"path":"https://nanonext.r-lib.org/reference/survey_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Survey Time — survey_time","text":"con Socket Context using 'surveyor' protocol. value [default 1000L] integer survey timeout milliseconds.","code":""},{"path":"https://nanonext.r-lib.org/reference/survey_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Survey Time — survey_time","text":"Invisibly, passed Socket Context.","code":""},{"path":"https://nanonext.r-lib.org/reference/survey_time.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set Survey Time — survey_time","text":"using function, start new survey, surveyor must: send message. switch receiving responses. respond survey, respondent must: receive survey message. send reply using send_aio() survey timed (reply can sent receiving survey).","code":""},{"path":"https://nanonext.r-lib.org/reference/survey_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set Survey Time — survey_time","text":"","code":"sur <- socket(\"surveyor\", listen = \"inproc://nanonext\") res <- socket(\"respondent\", dial = \"inproc://nanonext\")  survey_time(sur, 1000)  send(sur, \"reply to this survey\") #> [1] 0 aio <- recv_aio(sur)  recv(res) #> [1] \"reply to this survey\" s <- send_aio(res, \"replied\")  call_aio(aio)$data #> [1] \"replied\"  close(sur) close(res)"},{"path":"https://nanonext.r-lib.org/reference/tls_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Create TLS Configuration — tls_config","title":"Create TLS Configuration — tls_config","text":"Create TLS configuration object used secure connections. Specify client create client configuration server create server configuration.","code":""},{"path":"https://nanonext.r-lib.org/reference/tls_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create TLS Configuration — tls_config","text":"","code":"tls_config(client = NULL, server = NULL, pass = NULL, auth = is.null(server))"},{"path":"https://nanonext.r-lib.org/reference/tls_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create TLS Configuration — tls_config","text":"client either character path file containing X.509 certificate(s) PEM format, comprising certificate authority certificate chain (revocation list present), used validate certificates presented peers,length 2 character vector comprising [] certificate authority certificate chain [ii] certificate revocation list, empty string \"\" applicable. server either character path file containing PEM-encoded TLS certificate associated private key (may contain additional certificates leading validation chain, leaf certificate first),length 2 character vector comprising [] TLS certificate (optionally certificate chain) [ii] associated private key. pass (optional) required secret key supplied server encrypted password. security, consider providing function returns value, rather directly. auth logical value whether require authentication - default TRUE client FALSE server configurations. TRUE, session allowed proceed peer presented certificate validated. FALSE, authentication optional, whereby certificate validated presented peer, session allowed proceed otherwise. neither client server supplied, authentication performed argument effect.","code":""},{"path":"https://nanonext.r-lib.org/reference/tls_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create TLS Configuration — tls_config","text":"'tlsConfig' object.","code":""},{"path":"https://nanonext.r-lib.org/reference/tls_config.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create TLS Configuration — tls_config","text":"Specify one client server , neither (case empty client configuration created), configuration can one type. creating client configurations public internet usage, root CA ceritficates may usually found /etc/ssl/certs/ca-certificates.crt Linux systems. Otherwise, root CA certificates PEM format available Common CA Database site run Mozilla: https://www.ccadb.org/resources (select Server Authentication SSL/TLS certificates text file). link endorsed; use risk.","code":""},{"path":"https://nanonext.r-lib.org/reference/tls_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create TLS Configuration — tls_config","text":"","code":"tls <- tls_config() tls #> < TLS client config | auth mode: none > ncurl(\"https://postman-echo.com/get\", timeout = 1000L, tls = tls) #> $status #> [1] 200 #>  #> $headers #> NULL #>  #> $data #> [1] \"{\\n  \\\"args\\\": {},\\n  \\\"headers\\\": {\\n    \\\"host\\\": \\\"postman-echo.com\\\",\\n    \\\"x-request-start\\\": \\\"t1745698647.631\\\",\\n    \\\"connection\\\": \\\"close\\\",\\n    \\\"x-forwarded-proto\\\": \\\"https\\\",\\n    \\\"x-forwarded-port\\\": \\\"443\\\",\\n    \\\"x-amzn-trace-id\\\": \\\"Root=1-680d3f57-5934deb0183d149e75473fb9\\\"\\n  },\\n  \\\"url\\\": \\\"https://postman-echo.com/get\\\"\\n}\" #>"},{"path":"https://nanonext.r-lib.org/reference/transports.html","id":null,"dir":"Reference","previous_headings":"","what":"Transports (Documentation) — transports","title":"Transports (Documentation) — transports","text":"Transports supported nanonext. authoritative guide please refer online documentation NNG library https://nng.nanomsg.org/man/.","code":""},{"path":"https://nanonext.r-lib.org/reference/transports.html","id":"inproc","dir":"Reference","previous_headings":"","what":"Inproc","title":"Transports (Documentation) — transports","text":"inproc transport provides communication support sockets within process. may used alternative slower transports data must moved within process. transport tries hard avoid copying data, thus light-weight. [URI, inproc://] transport uses URIs using scheme inproc://, followed arbitrary string text, terminated NUL byte. inproc://nanonext valid example URL. Multiple URIs can used within application, interfere one another. Two applications may also use URI without interfering , unable communicate using URI.","code":""},{"path":"https://nanonext.r-lib.org/reference/transports.html","id":"ipc","dir":"Reference","previous_headings":"","what":"IPC","title":"Transports (Documentation) — transports","text":"IPC transport provides communication support sockets within different processes host. POSIX platforms, implemented using UNIX domain sockets. Windows, implemented using Windows Named Pipes. platforms may different implementation strategies. Traditional Names [URI, ipc://] transport uses URIs using scheme ipc://, followed path name file system socket named pipe created. POSIX platforms, path taken literally, relative current directory, unless begins /, case relative root directory. example, ipc://nanonext refers name nanonext current directory, whereas ipc:///tmp/nanonext refers nanonext located /tmp. Windows, names prefixed \\.\\ pipe\\ reside normal file system - required prefix added automatically NNG, URL form ipc://nanonext fine. UNIX Aliases [URI, unix://] unix:// scheme alias ipc:// can used inter-changeably, POSIX systems. purpose scheme support future transport making use AF_UNIX Windows systems, time necessary discriminate Named Pipes AF_UNIX based transports. Abstract Names [URI, abstract://] Linux, transport also can support abstract sockets. Abstract sockets use URI-encoded name scheme, allows arbitrary values conveyed path, including embedded NUL bytes. abstract://nanonext valid example URL. Abstract sockets representation file system, automatically freed system longer use. Abstract sockets ignore socket permissions, still possible determine credentials peer.","code":""},{"path":"https://nanonext.r-lib.org/reference/transports.html","id":"tcp-ip","dir":"Reference","previous_headings":"","what":"TCP/IP","title":"Transports (Documentation) — transports","text":"TCP transport provides communication support sockets across TCP/IP network. IPv4 IPv6 supported supported underlying platform. [URI, tcp://] transport uses URIs using scheme tcp://, followed IP address hostname, followed colon finally TCP port number. example, contact port 80 localhost either following URIs used: tcp://127.0.0.1:80 tcp://localhost:80. URI may restricted IPv6 using scheme tcp6://, may restricted IPv4 using scheme tcp4:// Note: Specifying tcp6:// may prevent IPv4 hosts used IPv4--IPv6 addresses, particularly using wildcard hostname listeners. details varies across operating systems. Note: tcp6:// tcp4:// specific NNG, might understood implementations. recommended use either numeric IP addresses, names specific either IPv4 IPv6 prevent confusion surprises. specifying IPv6 addresses, address must enclosed square brackets ([]) avoid confusion final colon separating port. example, port 80 IPv6 loopback address (::1) specified tcp://[::1]:80. special value 0 (INADDR_ANY) can used listener indicate listen interfaces host. shorthand form either omit address, specify asterisk () character. example, following three URIs equivalent, used listen port 9999 host: (1) tcp://0.0.0.0:9999 (2) tcp://:9999 (3) tcp://:9999","code":""},{"path":"https://nanonext.r-lib.org/reference/transports.html","id":"tls","dir":"Reference","previous_headings":"","what":"TLS","title":"Transports (Documentation) — transports","text":"TLS transport provides communication support peers across TCP/IP network using TLS v1.2 top TCP. IPv4 IPv6 supported supported underlying platform. [URI, tls+tcp://] transport uses URIs using scheme tls+tcp://, followed IP address hostname, followed colon finally TCP port number. example, contact port 4433 localhost either following URIs used: tls+tcp://127.0.0.1:4433 tls+tcp://localhost:4433. URI may restricted IPv6 using scheme tls+tcp6://, IPv4 using scheme tls+tcp4://.","code":""},{"path":"https://nanonext.r-lib.org/reference/transports.html","id":"websocket","dir":"Reference","previous_headings":"","what":"WebSocket","title":"Transports (Documentation) — transports","text":"ws wss transport provides communication support peers across TCP/IP network using WebSockets. IPv4 IPv6 supported supported underlying platform. [URI, ws://] transport uses URIs using scheme ws://, followed IP address hostname, optionally followed colon TCP port number, optionally followed path. (port number specified port 80 assumed. path specified path / assumed.) example, URI ws://localhost/app/pubsub use port 80 localhost, path /app/pubsub. [URI, wss://] Secure WebSockets use scheme wss://, default TCP port number 443. Otherwise format regular WebSockets. URI may restricted IPv6 using scheme ws6:// wss6://, IPv4 using scheme ws4:// wss4://. specifying IPv6 addresses, address must enclosed square brackets ([]) avoid confusion final colon separating port. example, path port IPv6 loopback address (::1) specified ws://[::1]/app/pubsub. Note: value specified host, , also used Host: HTTP header HTTP negotiation. listen ports system, host name may elided URL listener. wind listening interfaces system, possible caveats IPv4 IPv6 depending underlying system supports. (modern systems map special IPv6 address ::, IPv4 IPv6 connections permitted, IPv4 addresses mapped IPv6 addresses.) transport makes use shared HTTP server instances, permitting multiple sockets listeners configured hostname port. creating new listener, registered existing HTTP server instance one can found. Note matching algorithm somewhat simple, using string based hostname IP address port match. Therefore recommended use IP addresses empty string hostname listener URLs. sharing server instances typically possible within process. server may also used things (example serve static content), process.","code":""},{"path":"https://nanonext.r-lib.org/reference/unresolved.html","id":null,"dir":"Reference","previous_headings":"","what":"Query if an Aio is Unresolved — unresolved","title":"Query if an Aio is Unresolved — unresolved","text":"Query whether Aio, Aio value list Aios remains unresolved. Unlike call_aio(), function wait completion.","code":""},{"path":"https://nanonext.r-lib.org/reference/unresolved.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query if an Aio is Unresolved — unresolved","text":"","code":"unresolved(x)"},{"path":"https://nanonext.r-lib.org/reference/unresolved.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query if an Aio is Unresolved — unresolved","text":"x Aio list Aios (objects class 'sendAio', 'recvAio' 'ncurlAio'), Aio value stored $result $data etc.","code":""},{"path":"https://nanonext.r-lib.org/reference/unresolved.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query if an Aio is Unresolved — unresolved","text":"Logical TRUE x unresolved Aio Aio value list Aios contains least one unresolved Aio, FALSE otherwise.","code":""},{"path":"https://nanonext.r-lib.org/reference/unresolved.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Query if an Aio is Unresolved — unresolved","text":"Suitable use control flow statements . Note: querying resolution may cause previously unresolved Aio resolve.","code":""},{"path":"https://nanonext.r-lib.org/reference/unresolved.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query if an Aio is Unresolved — unresolved","text":"","code":"s1 <- socket(\"pair\", listen = \"inproc://nanonext\") aio <- send_aio(s1, \"test\", timeout = 100)  while (unresolved(aio)) {   # do stuff before checking resolution again   cat(\"unresolved\\n\")   msleep(20) } #> unresolved #> unresolved #> unresolved #> unresolved #> unresolved  unresolved(aio) #> [1] FALSE  close(s1)"},{"path":"https://nanonext.r-lib.org/reference/write_cert.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Self-Signed Certificate and Key — write_cert","title":"Generate Self-Signed Certificate and Key — write_cert","text":"Generate self-signed x509 certificate 4096 bit RSA private/public key pair use authenticated, encrypted TLS communications.","code":""},{"path":"https://nanonext.r-lib.org/reference/write_cert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Self-Signed Certificate and Key — write_cert","text":"","code":"write_cert(cn = \"127.0.0.1\", valid = \"20301231235959\")"},{"path":"https://nanonext.r-lib.org/reference/write_cert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Self-Signed Certificate and Key — write_cert","text":"cn [default '127.0.0.1'] character issuer common name (CN) certificate. can either hostname IP address, must match actual server URL client authentication depend . valid [default '20301231235959'] character '' date-time 'yyyymmddhhmmss' format. certificate valid time.","code":""},{"path":"https://nanonext.r-lib.org/reference/write_cert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Self-Signed Certificate and Key — write_cert","text":"list length 2, comprising $server $client. may passed directly relevant argument tls_config().","code":""},{"path":"https://nanonext.r-lib.org/reference/write_cert.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Self-Signed Certificate and Key — write_cert","text":"Note can take second two key certificate generated.","code":""},{"path":"https://nanonext.r-lib.org/reference/write_cert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Self-Signed Certificate and Key — write_cert","text":"","code":"if (FALSE) { # interactive() cert <- write_cert(cn = \"127.0.0.1\") ser <- tls_config(server = cert$server) cli <- tls_config(client = cert$client)  s <- socket(listen = \"tls+tcp://127.0.0.1:5555\", tls = ser) s1 <- socket(dial = \"tls+tcp://127.0.0.1:5555\", tls = cli)  # secure TLS connection established  close(s1) close(s)  cert }"},{"path":"https://nanonext.r-lib.org/reference/zzz.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal Package Function — zzz","title":"Internal Package Function — zzz","text":"present cleaning running examples tests. attempt run examples.","code":""},{"path":"https://nanonext.r-lib.org/reference/zzz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal Package Function — zzz","text":"","code":"zzz()"},{"path":"https://nanonext.r-lib.org/reference/zzz.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Internal Package Function — zzz","text":"","code":"if (Sys.info()[[\"sysname\"]] == \"Linux\") {   rm(list = ls())   gc()   .Call(nanonext:::rnng_thread_shutdown)   Sys.sleep(1L)   .Call(nanonext:::rnng_fini) } #> NULL"},{"path":[]},{"path":"https://nanonext.r-lib.org/news/index.html","id":"new-features-development-version","dir":"Changelog","previous_headings":"","what":"New Features","title":"nanonext (development version)","text":"Gains integer argument msgid. may specified special payload sent asynchronously upon timeout (communicate connected party). Accepts ‘req’ socket, case single-use context created automatically request. serial_config() now accepts vector arguments register multiple custom serialization configurations.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"updates-development-version","dir":"Changelog","previous_headings":"","what":"Updates","title":"nanonext (development version)","text":"robust interruption non-Windows platforms tools::SIGINT supplied passed autoexit argument daemon() (thanks @LennardLux, #97). Installation source specifying ‘INCLUDE_DIR’ ‘LIB_DIR’ environment variables works , correcting regression v1.5.2 (#104). Windows bi-arch source builds R <= 4.1 using rtools40 earlier work (regression since v1.5.1) (thanks @daroczig, #107). Package re-licensed MIT license.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"nanonext-152","dir":"Changelog","previous_headings":"","what":"nanonext 1.5.2","title":"nanonext 1.5.2","text":"CRAN release: 2025-03-18","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"updates-1-5-2","dir":"Changelog","previous_headings":"","what":"Updates","title":"nanonext 1.5.2","text":"write_cert() argument ‘cn’ now defaults ‘127.0.0.1’ instead ‘localhost’. messenger() now exits cleanly, correcting regression nanonext 1.5.0 (#87). Promises created ‘recvAio’ ‘ncurlAio’ now reject exactly way whether resolved time creation (#89). library version, ‘req’ socket option ‘req:resend-time’ set 0 now frees message soon send completed without waiting reply.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"nanonext-151","dir":"Changelog","previous_headings":"","what":"nanonext 1.5.1","title":"nanonext 1.5.1","text":"CRAN release: 2025-02-16","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"updates-1-5-1","dir":"Changelog","previous_headings":"","what":"Updates","title":"nanonext 1.5.1","text":"pipe_notify() drops argument ‘cv2’ signalling 2 condition variables one pipe event. Use signal forwarders %~>% instead. abillity lock() unlock() sockets removed. Renders safe serialize ‘nano’ ‘aio’ objects - inactive unserialized. Unified Windows build system now compiles ‘libmbedtls’ ‘libnng’ source even R <= 4.1 using Rtools40 earlier. Minimum supported ‘libnng’ version increased 1.9.0.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"nanonext-150","dir":"Changelog","previous_headings":"","what":"nanonext 1.5.0","title":"nanonext 1.5.0","text":"CRAN release: 2025-01-27","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"library-updates-1-5-0","dir":"Changelog","previous_headings":"","what":"Library Updates","title":"nanonext 1.5.0","text":"Bundled ‘libnng’ updated latest 1.10.1 release. Bundled ‘libmbedtls’ updated latest 3.6.2 LTS branch release.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"updates-1-5-0","dir":"Changelog","previous_headings":"","what":"Updates","title":"nanonext 1.5.0","text":"nano() updated ‘poly’ protocol, ‘pipe’ argument enabled send methods. write_cert() longer displays status message interactive (thanks @wlandau, #74). Removes partial matching using $, [[ [ object inheriting class ‘nano’. Fixes rare hang socket close possible Windows platforms IPC connections (#76).","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"nanonext-140","dir":"Changelog","previous_headings":"","what":"nanonext 1.4.0","title":"nanonext 1.4.0","text":"CRAN release: 2024-12-02","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"new-features-1-4-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"nanonext 1.4.0","text":"send() send_aio() gain argument ‘pipe’ accepts integer pipe ID directed sends (currently supported Sockets using ‘poly’ protocol). ‘recvAio’ now records integer pipe ID, successful, $aio upon resolution. Pipe objects (class ‘nanoPipe’) obsoleted. Adds monitor() read_monitor() easy monitoring connection changes (pipe additons removals) Socket.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"updates-1-4-0","dir":"Changelog","previous_headings":"","what":"Updates","title":"nanonext 1.4.0","text":"collect_pipe() removed given pipe interface changes.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"nanonext-132","dir":"Changelog","previous_headings":"","what":"nanonext 1.3.2","title":"nanonext 1.3.2","text":"CRAN release: 2024-11-14","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"updates-1-3-2","dir":"Changelog","previous_headings":"","what":"Updates","title":"nanonext 1.3.2","text":"Hotfix CRAN (updates tests ).","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"nanonext-131","dir":"Changelog","previous_headings":"","what":"nanonext 1.3.1","title":"nanonext 1.3.1","text":"CRAN release: 2024-11-13","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"updates-1-3-1","dir":"Changelog","previous_headings":"","what":"Updates","title":"nanonext 1.3.1","text":"Performs interruptible ‘aio’ waits using single dedicated thread, rather launching new threads, higher performance efficiency. Performance enhancements ‘ncurlAio’ ‘recvAio’ promises methods. Updates bundled ‘libnng’ v1.9.0 stable release. package shiny new hex logo.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"nanonext-130","dir":"Changelog","previous_headings":"","what":"nanonext 1.3.0","title":"nanonext 1.3.0","text":"CRAN release: 2024-10-04","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"new-features-1-3-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"nanonext 1.3.0","text":"Adds support threaded dispatcher mirai. Adds ‘recvAio’ method promises::.promise() promises::.promising() enable ‘recvAio’ promises.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"updates-1-3-0","dir":"Changelog","previous_headings":"","what":"Updates","title":"nanonext 1.3.0","text":"serial_config() now validates arguments returns list. Full validation also performed option set additional safety. Warning messages unserialization conversion failures received data now suppressable. Upgrades reply() always return even evaluation error. allows used safely loop without exiting early, example. Removes deprecated defunct next_config(). Internal performance enhancements. Updates bundled ‘libnng’ v1.8.0 latest patches.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"nanonext-121","dir":"Changelog","previous_headings":"","what":"nanonext 1.2.1","title":"nanonext 1.2.1","text":"CRAN release: 2024-08-19","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"updates-1-2-1","dir":"Changelog","previous_headings":"","what":"Updates","title":"nanonext 1.2.1","text":"Re-optimizes custom serialization (whilst addressing CRAN clang-UBSAN checks).","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"nanonext-120","dir":"Changelog","previous_headings":"","what":"nanonext 1.2.0","title":"nanonext 1.2.0","text":"CRAN release: 2024-08-17","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"new-features-1-2-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"nanonext 1.2.0","text":"Adds serial_config() create configurations can set Sockets make use custom serialization unserialization functions reference objects (plugs ‘refhook’ system native R serialization). 'opt<-'() now accepts special option ‘serial’ Sockets, takes configuration returned serial_config(). Adds ‘poly’ protocol one--one many socket connections (NNG’s pair v1 polyamorous mode). Adds is_ncurl_session() validation function. Adds collect_pipe() obtaining underlying Pipe ‘recvAio’. affords granular control connections, ability close individual pipes. send_aio() now accept Pipe direct messages specific peer supported protocols ‘poly’.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"updates-1-2-0","dir":"Changelog","previous_headings":"","what":"Updates","title":"nanonext 1.2.0","text":"Send mode ‘next’ folded default ‘serial’, custom serialization functions applying automatically registered. session-wide next_config() now deprecated defunct, favour new serial_config(). ncurl_session() now returns ‘errorValue’ 7 (Object closed) attempting transact closed session closing closed session, rather throwing error. collect_aio() collect_aio_() longer append empty names acting lists Aios none first place. Removes hard dependency stats utils base packages. Requires R >= 3.6.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"nanonext-111","dir":"Changelog","previous_headings":"","what":"nanonext 1.1.1","title":"nanonext 1.1.1","text":"CRAN release: 2024-06-23","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"new-features-1-1-1","dir":"Changelog","previous_headings":"","what":"New Features","title":"nanonext 1.1.1","text":"Adds ‘ncurlAio’ method promises::.promise() promises::.promising() enable ‘ncurlAio’ promises. Adds x[] new method Aio x equivalent collect_aio_(x), waits collects data.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"updates-1-1-1","dir":"Changelog","previous_headings":"","what":"Updates","title":"nanonext 1.1.1","text":"request() specifying argument ‘cv’ NULL ‘conditionVariable’ cause pipe connection dropped reply (asynchronously) completed. Removes deprecated functions strcat(), recv_aio_signal() request_signal(). Drops base64enc() base64dec() favour {secretbase} package. msleep() now ignores negative values rather taking absolute value. later now relaxed soft ‘suggests’ dependency (required using promises). promises added soft ‘enhances’ dependency.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"nanonext-110","dir":"Changelog","previous_headings":"","what":"nanonext 1.1.0","title":"nanonext 1.1.0","text":"CRAN release: 2024-06-04","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"new-features-1-1-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"nanonext 1.1.0","text":"Adds collect_aio() collect_aio_() wait collect data Aio list Aios. unresolved(), call_aio(), call_aio()_ stop_aio() now accept list Aios. pipe_notify() gains ability specify ‘cv’ NULL cancel previously-set signals. ncurl_aio() modified internally support conversion ‘ncurlAio’ event-driven promises.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"updates-1-1-0","dir":"Changelog","previous_headings":"","what":"Updates","title":"nanonext 1.1.0","text":"recv_aio() request() add argument ‘cv’ allowing optional signalling condition variable. separate functions recv_aio_signal() request_signal() deprecated. strcat() deprecated considered non-core - recommended replace usage sprintf(). status_code() now returns status code combined explanation character string. Performance enhancements unresolved(), call_aio() call_aio_(). Updates bundled ‘libnng’ v1.8.0 latest patches.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"nanonext-100","dir":"Changelog","previous_headings":"","what":"nanonext 1.0.0","title":"nanonext 1.0.0","text":"CRAN release: 2024-05-01","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"new-features-1-0-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"nanonext 1.0.0","text":"request() request_signal() modified internally support conversion ‘recvAio’ event-driven promises. later dependency ensures asynchronous R code always run main R thread. later lazily loaded first time promise used, hence impact load time nanonext dependent packages.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"updates-1-0-0","dir":"Changelog","previous_headings":"","what":"Updates","title":"nanonext 1.0.0","text":"stop_aio() now causes ‘aio’ resolve ‘errorValue’ 20 (Operation canceled) successfully stopped. nng_error() now returns error code combined message character string. Integer file descriptors longer appended ‘nanoSocket’ attributes. Adds ‘xz’ SystemRequirements (case previously explicitly specified) (thanks @gaborcsardi). Re-aligns bundled ‘libmbedtls’ v3.5.2 optimises bundle size. Updates minimum ‘libnng’ version requirement v1.6.0. Upgrades bundled ‘libnng’ v1.8.0.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"nanonext-01352","dir":"Changelog","previous_headings":"","what":"nanonext 0.13.5.2","title":"nanonext 0.13.5.2","text":"CRAN release: 2024-04-06","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"updates-0-13-5-2","dir":"Changelog","previous_headings":"","what":"Updates","title":"nanonext 0.13.5.2","text":"Safer efficient memory reads ‘next’ serialization corrects CRAN UBSAN-clang check errors.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"nanonext-01351","dir":"Changelog","previous_headings":"","what":"nanonext 0.13.5.1","title":"nanonext 0.13.5.1","text":"CRAN release: 2024-04-05","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"new-features-0-13-5-1","dir":"Changelog","previous_headings":"","what":"New Features","title":"nanonext 0.13.5.1","text":"next_config() gains argument ‘class’ ‘vec’, enabling custom serialization reference object types supported R serialization. integer file descriptor appended ‘nanoSockets’ attribute ‘fd’ - see updated documentation socket().","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"updates-0-13-5-1","dir":"Changelog","previous_headings":"","what":"Updates","title":"nanonext 0.13.5.1","text":"Removes SHA-2 cryptographic hash functions (please use streaming implementation secretbase package).","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"nanonext-0132","dir":"Changelog","previous_headings":"","what":"nanonext 0.13.2","title":"nanonext 0.13.2","text":"CRAN release: 2024-03-01","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"updates-0-13-2","dir":"Changelog","previous_headings":"","what":"Updates","title":"nanonext 0.13.2","text":"Fixes cases ‘built newer macOS version linked’ installation warnings MacOS. Upgrades bundled ‘libnng’ v1.7.2.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"nanonext-0130","dir":"Changelog","previous_headings":"","what":"nanonext 0.13.0","title":"nanonext 0.13.0","text":"CRAN release: 2024-02-07","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"updates-0-13-0","dir":"Changelog","previous_headings":"","what":"Updates","title":"nanonext 0.13.0","text":"Please note following potentially breaking changes, update ready: Default behaviour send() recv() aligned non-blocking Sockets Contexts (facilitated synchronous context sends NNG since v1.6.0). ncurl(), ncurl_aio() ncurl_session() now restrict ‘header’ ‘response’ arguments character vectors , longer accepting lists (safety performance). Unserialization / decoding errors received message translated specified mode output message stderr, longer generate warning. SHA functions now skip serialization headers serialized R objects (ensuring portability contain R version encoding information). means , serialized objects, hashes different obtained using prior package versions. sha1() removed hash option. changes: messenger() specifying ‘auth’ now works reliably endpoints using different R versions/platforms due hashing portability fix. Internal memory-efficiency performance enhancements. Upgrades bundled ‘libmbedtls’ v3.5.2.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"nanonext-0120","dir":"Changelog","previous_headings":"","what":"nanonext 0.12.0","title":"nanonext 0.12.0","text":"CRAN release: 2024-01-10 major performance stability release bundling ‘libnng’ v1.7.0 source code.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"new-features-0-12-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"nanonext 0.12.0","text":"pipe_notify() argument ‘flag’ allows supplying signal raised flag set upon pipe event.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"updates-0-12-0","dir":"Changelog","previous_headings":"","what":"Updates","title":"nanonext 0.12.0","text":"compact print methods ‘recvAio’, ‘sendAio’, ‘ncurlAio’, ‘ncurlSession’ ‘tlsConfig’ objects. random() now explicitly limits argument ‘n’ values 0 1024. next_config() now returns pairlist (registered serialization functions) rather list (efficiency). Using mode ‘next’, serialization functions incorrect signatures now simply ignored rather raise errors. ‘nanoStream’ objects simplified internally updated attributes ‘mode’ ‘state’. Deprecated function .() removed. Eliminates potential memory leaks along certain error paths. Fixes bug prevented much higher TLS performance using bundled ‘libnng’ source. Upgrades bundled ‘libnng’ v1.7.0 release.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"nanonext-0110","dir":"Changelog","previous_headings":"","what":"nanonext 0.11.0","title":"nanonext 0.11.0","text":"CRAN release: 2023-12-04 major stability release bundling ‘libnng’ v1.6.0 source code.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"new-features-0-11-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"nanonext 0.11.0","text":"Introduces call_aio_(), user-interruptible version call_aio() suitable interactive use. Introduces wait_() until_() user-interruptible versions wait() () suitable interactive use. Implements %~>% signal forwarder one ‘conditionVariable’ another.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"updates-0-11-0","dir":"Changelog","previous_headings":"","what":"Updates","title":"nanonext 0.11.0","text":"simplified ‘refhook’ argument takes pair serialization unserialization functions list. registered ‘refhook’ functions apply external pointer type objects . longer returns invisibly easier confimation correct functions registered. () updated identical .(), returning FALSE instead TRUE timeout reached. reap() updated longer warn cases returns ‘errorValue’. pipe_notify() arguments ‘add’, ‘remove’ ‘flag’ now default FALSE instead TRUE easier selective specification events signal. Fixes regression release 0.10.4 caused potential segfault using ncurl() ‘follow’ set TRUE server returns missing invalid relocation address. weak references interface removed ‘non-core’. Upgrades bundled ‘libnng’ v1.6.0 release. Upgrades bundled ‘libmbedtls’ v3.5.1.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"nanonext-0104","dir":"Changelog","previous_headings":"","what":"nanonext 0.10.4","title":"nanonext 0.10.4","text":"CRAN release: 2023-11-03","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"new-features-0-10-4","dir":"Changelog","previous_headings":"","what":"New Features","title":"nanonext 0.10.4","text":"nextmode() configures settings send mode ‘next’. Registers hook functions custom serialization unserialization reference objects (accessed via external pointer). .() contains revised behaviour synchronisation primitive, returning FALSE instead TRUE timeout reached. function replace () future package version.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"updates-0-10-4","dir":"Changelog","previous_headings":"","what":"Updates","title":"nanonext 0.10.4","text":"lock() supplying ‘cv’ improved behaviour locks socket whilst allowing initial connections re-connections (‘cv’ registered add remove pipe events). Improves listener / dialer logic TLS connections, allowing inter alia synchronous dials. request() argument ‘ack’ removed due stability considerations. Fixes memory leaks detected valgrind. Upgrades bundled ‘libmbedtls’ v3.5.0.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"nanonext-0102","dir":"Changelog","previous_headings":"","what":"nanonext 0.10.2","title":"nanonext 0.10.2","text":"CRAN release: 2023-09-27","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"updates-0-10-2","dir":"Changelog","previous_headings":"","what":"Updates","title":"nanonext 0.10.2","text":"Addresses one case memory access error identified CRAN.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"nanonext-0101","dir":"Changelog","previous_headings":"","what":"nanonext 0.10.1","title":"nanonext 0.10.1","text":"CRAN release: 2023-09-26","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"new-features-0-10-1","dir":"Changelog","previous_headings":"","what":"New Features","title":"nanonext 0.10.1","text":"request() adds logical argument ‘ack’, sends ack(nowledgement) back rep node upon successful async message receive. reap() implemented faster alternative close() Sockets, Contexts, Listeners Dialers - avoiding S3 method dispatch, hence works unclassed external pointers created .context(). random() updated use Mbed TLS library generate random bytes. Adds ‘convert’ argument specifying whether return raw vector character string. Adds ‘next’ mode send functions, 100% compatible R serialisation format (may received using mode ‘serial’).","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"updates-0-10-1","dir":"Changelog","previous_headings":"","what":"Updates","title":"nanonext 0.10.1","text":"write_cert() optimised higher efficiency faster operation. send() recv() contexts now use efficient synchronous methods available. Fixes package installation failures R default C compiler command contains additional flags (thanks @potash #16). Performance improvements due simplification internal structure ‘aio’ objects. Rolls forward bundled ‘libnng’ v1.6.0 alpha (a54820f).","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"nanonext-0100","dir":"Changelog","previous_headings":"","what":"nanonext 0.10.0","title":"nanonext 0.10.0","text":"CRAN release: 2023-08-31","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"new-features-0-10-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"nanonext 0.10.0","text":"ncurl_aio() separated dedicated function async http requests. Receive functions add mode = 'string' faster alternative ‘character’ receiving scalar value.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"updates-0-10-0","dir":"Changelog","previous_headings":"","what":"Updates","title":"nanonext 0.10.0","text":"Please review following potentially breaking changes, update ready: ncurl() argument ‘async’ retired. Please use ncurl_aio() asynchronous requests. ncurl() now always returns response message body $data whether convert TRUE FALSE. argument ‘keep.raw’ receive functions (previously-deprecated) removed. cv_reset() cv_signal() now return invisible zero rather NULL. Function device() removed partially due non-interruptible blocking behaviour. changes: Failure unserialize, convert character, automatically saves data raw vector recovery, generating warning instead error (case prior v0.9.2). Higher performance sending vector data. Permits sending NULL, case empty vector corresponding mode received. Character vectors containing empty characters middle now received correctly. character vectors, respects original encoding longer performs automatic conversion UTF8. Base64 SHA hash functions now always use big-endian representation serialization (performed) ensure consistency across systems (fixes #14, regression nanonext 0.9.2). Package installation now succeeds certain environments ‘cmake’ failed make ‘libmbedtls’ detectable building (thanks @kendonB #13). Source bundles ‘libmbedtls’ ‘libnng’ slimmed smaller package installed sizes. Configures bundled ‘libmbedtls’ v3.4.0 higher performance. Supported ‘libmbedtls’ version increased >= 2.5.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"nanonext-092","dir":"Changelog","previous_headings":"","what":"nanonext 0.9.2","title":"nanonext 0.9.2","text":"CRAN release: 2023-08-07 version contains performance enhancements resulted potentially breaking changes; please review carefully update ready.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"new-features-0-9-2","dir":"Changelog","previous_headings":"","what":"New Features","title":"nanonext 0.9.2","text":"base64dec() argument ‘convert’ now accepts NA input, unserializes back original object.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"updates-0-9-2","dir":"Changelog","previous_headings":"","what":"Updates","title":"nanonext 0.9.2","text":"argument ‘keep.raw’ receive functions deprecated. raw vectors longer created part unserialisation data conversion. receive functions, attempting unserialise non-serialised message now error ‘unknown input format’ rather fall back raw message vector. Attempting convert non-text data embedded nuls now error instead silently returning NULL. efficiency, ‘convert’ = TRUE, raw vector longer stored $raw. Attributes now taken account scalar strings raw vectors ensure unique hashes. Experimental threaded function timed_signal() removed. Requires R >= 3.5 ensure R serialization version 3.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"nanonext-091","dir":"Changelog","previous_headings":"","what":"nanonext 0.9.1","title":"nanonext 0.9.1","text":"CRAN release: 2023-07-12","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"new-features-0-9-1","dir":"Changelog","previous_headings":"","what":"New Features","title":"nanonext 0.9.1","text":"listen() dial() gain argument ‘tls’ supplying TLS configuration object write_cert() generates 4096 bit RSA keys self-signed X.509 certificates use tls_config(). weakref(), weakref_key() weakref_value() implement interface R’s weak reference system. may used synchronising lifetimes objects reference objects Sockets Aios, creating read-objects accessible weakref value alone. strcat() provides simple, fast utility concatenate two strings.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"updates-0-9-1","dir":"Changelog","previous_headings":"","what":"Updates","title":"nanonext 0.9.1","text":"tls_config() now accepts relative path filenames supplied ‘client’ ‘server’ arguments. ‘tlsConfig’ objects longer ‘source’ attribute. Fix cases base64enc() failed objects exceeding certain size. stream() updated internally additional robustness. Updates bundled ‘libmbedtls’ v3.4.0 source configuration threading support. Updates bundled ‘libnng’ v1.6.0 alpha (c5e9d8a) , resolved previous issues.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"nanonext-090","dir":"Changelog","previous_headings":"","what":"nanonext 0.9.0","title":"nanonext 0.9.0","text":"CRAN release: 2023-05-28 package now compatible () currently released ‘libnng’ versions. attempt use system ‘libnng’ versions >= 1.5 detected, compile bundled library necessary.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"new-features-0-9-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"nanonext 0.9.0","text":"Implements tls_config() create re-usable TLS configurations certificate / key files (provided directly text).","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"updates-0-9-0","dir":"Changelog","previous_headings":"","what":"Updates","title":"nanonext 0.9.0","text":"‘pem’ argument ncurl(), ncurl_session() stream() retired favour ‘tls’ takes TLS Configuration object created tls_config() rather PEM certificate directly. Removes nanonext_version() favour existing nng_version(), along utils::packageVersion() required, greater flexibility. Removes ... argument context() - retained compatibility ‘verify’ argument, removed previous release. Package widens compatibility support system ‘libnng’ versions >= 1.5.0. Bundled ‘libnng’ source rolled back v1.6.0 pre-release (8e1836f) stability.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"nanonext-083","dir":"Changelog","previous_headings":"","what":"nanonext 0.8.3","title":"nanonext 0.8.3","text":"CRAN release: 2023-05-06","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"new-features-0-8-3","dir":"Changelog","previous_headings":"","what":"New Features","title":"nanonext 0.8.3","text":"Implements cv_signal() timed_signal() signalling condition variable, latter specified time (newly-created thread). Implements .context(), performance alternative context() create full object. Adds utility nanonext_version() providing package version, NNG mbed TLS library versions single string. ncurl() gains ‘timeout’ argument.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"updates-0-8-3","dir":"Changelog","previous_headings":"","what":"Updates","title":"nanonext 0.8.3","text":"Removes ‘verify’ argument context() (changed ‘…’ compatibility) request() request_signal() rendered safe internally use timeouts. name single argument msleep() changed ‘time’ ‘msec’. Functions pipe_notify(), lock() unlock() now error unsuccessful rather returning warning. compiling bundled ‘libmbedtls’ ‘libnng’ libraries source, R’s configured C compiler now chosen system default different. Bundled ‘libnng’ source updated v1.6.0 alpha (c5e9d8a). Bundled ‘libmbedtls’ source updated v3.4.0.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"nanonext-082","dir":"Changelog","previous_headings":"","what":"nanonext 0.8.2","title":"nanonext 0.8.2","text":"CRAN release: 2023-04-14","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"new-features-0-8-2","dir":"Changelog","previous_headings":"","what":"New Features","title":"nanonext 0.8.2","text":"lock() unlock() implemented prevent pipe connections established socket, optionally tied value condition variable.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"updates-0-8-2","dir":"Changelog","previous_headings":"","what":"Updates","title":"nanonext 0.8.2","text":"context() gains argument ‘verify’ default TRUE. adds additional protection notably request() request_signal() functions using timeouts, require connection present. Sending hashing language objects symbols now possible fixes serialisation. () now works intended. Removes recently-introduced msg_pipe() 'weakref<-'() maintain simplicity user interface. Internal performance enhancements.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"nanonext-081","dir":"Changelog","previous_headings":"","what":"nanonext 0.8.1","title":"nanonext 0.8.1","text":"CRAN release: 2023-03-27","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"new-features-0-8-1","dir":"Changelog","previous_headings":"","what":"New Features","title":"nanonext 0.8.1","text":"adds core functions cv(), wait(), (), cv_value(), cv_reset(). adds signalling receive functions recv_aio_signal() request_signal(). pipe_notify() signals 2 condition variables whenever pipes added removed socket. Adds msg_pipe() return pipe connection associated ‘recvAio’ message. Exposes sha1() cryptographic hash HMAC generation function ‘Mbed TLS’ library (secure applications, use one SHA-2 algorithms instead). Utility function 'weakref<-'() exposes R_MakeWeakRef R’s C API. Useful keeping objects alive long required dependent object.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"updates-0-8-1","dir":"Changelog","previous_headings":"","what":"Updates","title":"nanonext 0.8.1","text":"ncurl_session() gains ‘timeout’ argument, returns ‘errorValue’ warning upon error. listen() dial() gain new logical argument ‘error’ govern function behaviour upon error. Internal performance enhancements.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"nanonext-080","dir":"Changelog","previous_headings":"","what":"nanonext 0.8.0","title":"nanonext 0.8.0","text":"CRAN release: 2023-03-03","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"new-features-0-8-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"nanonext 0.8.0","text":"Implements stat(), interface NNG statistics framework. Can used return number currently connected pipes socket, connection attempts listener/dialer etc. Implements parse_url(), parses URL per NNG. Provides fast standardised method obtaining parts URL string.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"updates-0-8-0","dir":"Changelog","previous_headings":"","what":"Updates","title":"nanonext 0.8.0","text":"Please review following potentially breaking changes, update ready: Using socket() specifying either ‘dial’ ‘listen’, failure either dial listen (due invalid URL example) now error rather return socket warning. safer behaviour make easier detect bugs user code. opt() 'opt<-'() implemented ergonomic options getter setter functions replace getopt() setopt(). error option exist / input value invalid etc. subscribe(), unsubscribe() survey_time() now return Socket Context invisibly rather exit code, error upon invalid input etc. survey_time() argument name now ‘value’, default 1000L. nano Object methods $opt, $listener_opt, $dialer_opt re-implemented either get set values depending whether ‘value’ parameter supplied. changes: Bundled ‘libnng’ source updated v1.6.0 pre-release (8e1836f). Supported R version amended >= 2.12, person() adopted current format used package description. Internal performance enhancements.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"nanonext-073","dir":"Changelog","previous_headings":"","what":"nanonext 0.7.3","title":"nanonext 0.7.3","text":"CRAN release: 2023-01-22","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"new-features-0-7-3","dir":"Changelog","previous_headings":"","what":"New Features","title":"nanonext 0.7.3","text":"Implements ncurl_session() transact() providing high-performance, re-usable http(s) connections.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"updates-0-7-3","dir":"Changelog","previous_headings":"","what":"Updates","title":"nanonext 0.7.3","text":"dialers, ‘autostart’ argument dial(), socket() nano() now accepts NA starting dialer synchronously - less resilient connection immediately possible, avoids subtle errors attempting use socket asynchronous dial completed. Closing stream now renders inactive safely, without need strip attributes object (case previously). messenger() faster connect exits gracefully case connection error. Removes defunct function nano_init(). Bundled ‘libnng’ source updated v1.6.0 pre-release (539e559). Fixes CRAN ‘additional issue’ (clang-UBSAN).","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"nanonext-072","dir":"Changelog","previous_headings":"","what":"nanonext 0.7.2","title":"nanonext 0.7.2","text":"CRAN release: 2022-12-12","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"updates-0-7-2","dir":"Changelog","previous_headings":"","what":"Updates","title":"nanonext 0.7.2","text":"raw character hash conversion, uses snprintf instead sprintf CRAN compliance.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"nanonext-071","dir":"Changelog","previous_headings":"","what":"nanonext 0.7.1","title":"nanonext 0.7.1","text":"CRAN release: 2022-11-16","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"new-features-0-7-1","dir":"Changelog","previous_headings":"","what":"New Features","title":"nanonext 0.7.1","text":"Implements getopt(), counterpart setopt() retrieving value options objects.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"updates-0-7-1","dir":"Changelog","previous_headings":"","what":"Updates","title":"nanonext 0.7.1","text":"setopt() interface simplified, type now inferred value supplied. ncurl() now returns redirect addresses response header ‘Location’. HTTP data can also returned $data provided. Eliminates CRAN ‘additional issue’ (clang/gcc-UBSAN). Internal performance optimisations.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"nanonext-070","dir":"Changelog","previous_headings":"","what":"nanonext 0.7.0","title":"nanonext 0.7.0","text":"CRAN release: 2022-11-07","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"new-features-0-7-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"nanonext 0.7.0","text":"status_code() utility returns translation HTTP response status codes.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"updates-0-7-0","dir":"Changelog","previous_headings":"","what":"Updates","title":"nanonext 0.7.0","text":"Please review following potentially breaking changes, update ready: socket(), context() stream() now error rather return ‘errorValue’. error value included error message. send_aio() recv_aio() now always return integer ‘errorValue’ $result $data respectively. recv() recv_aio() now return integer ‘errorValue’ $raw $data ‘keep.raw’ set TRUE. ncurl() now returns integer ‘errorValue’ $status, $headers, $raw $data sync async. redirects followed, address now returned character string $data. functions send receive messages .e. send(), send_aio(), recv(), recv_aio() ncurl(), ‘errorValues’ now returned silently without accompanying warning. Use is_error_value() explicitly check errors. nano_init() deprecated due change behaviour. send() longer ‘…’ argument. effect since 0.6.0, now error additional arguments provided (please check remove previous uses argument ‘echo’). Also longer returns invisibly consistency recv(). listen() dial() now take socket argument; nano objects, $listen() $dial() methods must used instead. nano() now creates nano object method $context_open() applicable protocols. Opening context attach context $context $context_close() method. context active, object methods apply context instead socket. Method $socket_setopt() renamed $setopt() can used socket active context applicable. Non-logical values supplied logical arguments now error: documented function applicable. changes: Integer send()/recv() arguments ‘mode’ implemented 0.5.3 now documented considered part API. performance feature skips matching character argument value. Fixes bug introduced 0.6.0 Aios returning ‘errorValues’ cached class, returning integer values accessed subsequently. Fixes potential crash base64dec() encounters invalid input data. Error messages revised accurate. Fixes $ method ‘recvAio’ objects object stopped using stop_aio(). Using $listen() $dial() methods nano object specifying ‘autostart = FALSE’ now attaches $listener_start() $dialer_start() method recently added listener/dialer. device() longer prompts confirmation interactive environments - device creation successful binding 2 raw mode sockets, little scope accidental use. Print method ‘errorValue’ now also provides human translation error code. Bundled ‘libnng’ source updated v1.6.0 pre-release (5385b78). Internal performance enhancements.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"nanonext-060","dir":"Changelog","previous_headings":"","what":"nanonext 0.6.0","title":"nanonext 0.6.0","text":"CRAN release: 2022-10-09","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"new-features-0-6-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"nanonext 0.6.0","text":"Implements base64enc() base64dec() base64 encoding decoding using ‘Mbed TLS’ library. sha224(), sha256(), sha384() sha512() functions gain argument ‘convert’ control whether return raw vector character string. ncurl() gains argument ‘follow’ (default FALSE) control whether redirects automatically followed.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"updates-0-6-0","dir":"Changelog","previous_headings":"","what":"Updates","title":"nanonext 0.6.0","text":"Please review following potentially breaking changes, update ready: send() now returns integer exit code cases. ‘echo’ argument replaced ‘…’, specifying ‘echo’ longer effect. recv(), recv_aio() request() now default ‘keep.raw’ = FALSE return sent object. ncurl() argument ‘request’ renamed ‘response’ specifying response headers return (avoid confusion); new argument ‘follow’ (placed ‘convert’ ‘method’) controls whether redirects followed, longer user prompt interactive environments. sha224(), sha256(), sha384() sha512() functions longer return ‘nanoHash’ objects, raw vector character string depending new argument ‘convert’. changes: socket() nano() now accept non-missing NULL ‘listen’ ‘dial’ arguments, allowing easier programmatic use. Functions send(), recv(), send_aio(), recv_aio(), setopt(), subscribe(), unsubscribe() survey_time() longer S3 generics enhanced performance. messenger() uses longer SHA-512 hash authentication; fixes errors creating connnection shown. source code ‘libnng’ v1.6.0 pre-release (722bf46) ‘libmbedtls’ v3.2.1 now comes bundled rather downloaded - much efficient unused portions stripped . Detects uses system installations ‘libnng’ >= 1.6.0 pre-release 722bf46 ‘libmbedtls’ >= 2 available, compiling source required. R >= 4.2 Windows now performs source compilation bundled ‘libnng’ ‘libmbedtls’ using rtools42 toolchain. Installation falls back pre-compiled libraries older R releases. Supported R version amended >= 2.5, current new.env() interface implemented. Internal performance enhancements.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"nanonext-055","dir":"Changelog","previous_headings":"","what":"nanonext 0.5.5","title":"nanonext 0.5.5","text":"CRAN release: 2022-09-04","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"updates-0-5-5","dir":"Changelog","previous_headings":"","what":"Updates","title":"nanonext 0.5.5","text":"Installation succeeds Linux library path uses ‘lib64’ instead ‘lib’, fails gracefully ‘cmake’ found.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"nanonext-054","dir":"Changelog","previous_headings":"","what":"nanonext 0.5.4","title":"nanonext 0.5.4","text":"CRAN release: 2022-09-02","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"new-features-0-5-4","dir":"Changelog","previous_headings":"","what":"New Features","title":"nanonext 0.5.4","text":"Implements sha224(), sha256(), sha384() sha512() series fast, optimised cryptographic hash HMAC generation functions using ‘Mbed TLS’ library. ncurl() stream() gain argmument ‘pem’ optionally specifying certificate authority certificate chain PEM file authenticating secure sites. ncurl() gains argument ‘request’ specifying response headers return. ncurl() now returns additional $status (response status code) $headers (response headers) fields. messenger() gains argument ‘auth’ authenticating communications based pre-shared key. random() gains argument ‘n’ generating vector random numbers.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"updates-0-5-4","dir":"Changelog","previous_headings":"","what":"Updates","title":"nanonext 0.5.4","text":"‘libmbedtls’ now built source upon install package always TLS support uses latest v3.2.1 release. Windows binaries also updated include TLS support. nng_version() now returns ‘Mbed TLS’ library version number. device() gains confirmation prompt running interactively safety. Fixes issue ncurl() caused 26 cryptography error certain secure sites using SNI.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"nanonext-053","dir":"Changelog","previous_headings":"","what":"nanonext 0.5.3","title":"nanonext 0.5.3","text":"CRAN release: 2022-08-08","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"updates-0-5-3","dir":"Changelog","previous_headings":"","what":"Updates","title":"nanonext 0.5.3","text":"Configure script provides information default. Allows integer send/recv ‘mode’ arguments (note: undocumented performance feature future guarantees). Aio ‘timeout’ arguments now default NULL applying socket default, although non-breaking -2L also work. msleep() made safe (block) case non-numeric input. Internal performance optimisations.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"nanonext-052","dir":"Changelog","previous_headings":"","what":"nanonext 0.5.2","title":"nanonext 0.5.2","text":"CRAN release: 2022-07-07","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"new-features-0-5-2","dir":"Changelog","previous_headings":"","what":"New Features","title":"nanonext 0.5.2","text":"Adds mclock(), msleep() random() utilities exposing library functions timing cryptographic RNG respectively. socket() gains ability open ‘raw’ mode sockets. Please note: general use - set argument unless specific need, use device() (refer NNG documentation). Implements device() creates socket forwarder proxy. Warning: use separate process function blocks ability interrupt.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"updates-0-5-2","dir":"Changelog","previous_headings":"","what":"Updates","title":"nanonext 0.5.2","text":"Internal performance optimisations.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"nanonext-051","dir":"Changelog","previous_headings":"","what":"nanonext 0.5.1","title":"nanonext 0.5.1","text":"CRAN release: 2022-06-10","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"updates-0-5-1","dir":"Changelog","previous_headings":"","what":"Updates","title":"nanonext 0.5.1","text":"Upgrades NNG library 1.6.0 pre-release (locked version 722bf46). version incorporates feature simplifying aio implementation nanonext. Configure script updated always download build ‘libnng’ source (except Windows pre-built libraries downloaded). script still attempts detect system ‘libmbedtls’ library link . Environment variable ‘NANONEXT_SYS’ introduced permit use system ‘libnng’ install /usr/local. Note manual setting allowing custom NNG builds, requires version NNG least recent 722bf46. Fixes bug involving unresolvedValue returned Aios (thanks @lionel- #3).","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"nanonext-050","dir":"Changelog","previous_headings":"","what":"nanonext 0.5.0","title":"nanonext 0.5.0","text":"CRAN release: 2022-05-10","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"new-features-0-5-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"nanonext 0.5.0","text":"$context() method added creating new contexts nano Objects using supported protocols (.e. req, rep, sub, surveyor, respondent) - replaces context() function nano Objects. subscribe() unsubscribe() now accept topic atomic type (just character), allowing pub/sub used integer, double, logical, complex, raw vectors. Sending via “pub” protocol, topic longer needs separated rest message, allowing character scalars sent well vectors. Added convenience auxiliary functions is_nano() is_aio().","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"updates-0-5-0","dir":"Changelog","previous_headings":"","what":"Updates","title":"nanonext 0.5.0","text":"Protocol-specific helpers subscribe(), unsubscribe(), survey_time() gain nanoContext methods. Default protocol now ‘bus’ opening new Socket nano Object - choices ordered logically. Closing stream now strips attributes object rendering nil external pointer - safety, eliminating potential crash attempting re-use closed stream. receives, error occurs unserialisation data conversion (e.g. mode incorrectly specified), received raw vector now available $raw $data keep.raw = TRUE. Setting ‘NANONEXT_TLS=1’ now allows downloaded NNG library built system mbedtls installation. Setting ‘NANONEXT_ARM’ longer required platforms Raspberry Pi - package configure script now detects platforms requiring libatomic linker flag automatically. Deprecated send_ctx(), recv_ctx() logging removed. -round internal performance optimisations.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"nanonext-040","dir":"Changelog","previous_headings":"","what":"nanonext 0.4.0","title":"nanonext 0.4.0","text":"CRAN release: 2022-04-10","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"new-features-0-4-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"nanonext 0.4.0","text":"New stream() interface exposes low-level byte stream functionality NNG library, intended communicating non-NNG endpoints, including limited websocket servers. ncurl() adds ‘async’ option perform HTTP requests asynchronously, returning immediately ‘recvAio’. Adds explicit arguments HTTP method, headers (takes named list character vector) request data, well specify conversion raw bytes required. New messenger() function implements multi-threaded console-based messaging system using NNG’s scalability protocols (currently proof concept). New nano_init() function intended called immediately package load set global options.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"updates-0-4-0","dir":"Changelog","previous_headings":"","what":"Updates","title":"nanonext 0.4.0","text":"Behavioural change: messages upgraded warnings across package allow enhanced reporting originating call e.g. via warnings() flexibility handling via setting options(). Returned NNG error codes now classed ‘errorValue’ across package. Unified send() recv() functions, asynchronous counterparts send_aio() recv_aio(), now S3 generics can used across Sockets, Contexts Streams. Revised ‘block’ argument send() recv() now allows integer value setting timeout. send_ctx() recv_ctx() deprecated removed future package version - methods send() recv() used instead. allow flexible practices, logging now deprecated removed entirely next package version. Logging can still enabled via ‘NANONEXT_LOG’ prior package load logging() now defunct. Internal performance optimisations.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"nanonext-030","dir":"Changelog","previous_headings":"","what":"nanonext 0.3.0","title":"nanonext 0.3.0","text":"CRAN release: 2022-03-10","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"new-features-0-3-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"nanonext 0.3.0","text":"Aio values $result, $data $raw now resolve automatically without requiring call_aio(). Access directly ‘unresolved’ logical NA value returned Aio operation yet complete. unresolved() added auxiliary function query whether Aio unresolved, use control flow statements. Integer error values generated receive functions now classed ‘errorValue’. is_error_value() helper function included. is_nul_byte() added helper function request/reply setups. survey_time() added convenience function surveyor/respondent patterns. logging() function specify global package logging level - ‘error’ ‘info’. Automatically checks environment variable ‘NANONEXT_LOG’ package load time logging(level = \"check\") called. ncurl() adds ‘…’ argument. Support HTTP methods GET.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"updates-0-3-0","dir":"Changelog","previous_headings":"","what":"Updates","title":"nanonext 0.3.0","text":"listen() dial() now return (invisible) zero rather NULL upon success consistency functions. Options documentation entry renamed opts avoid clash base R ‘options’. Common format NNG errors informational events now starts timestamp easier logging. Fixes installation issues certain ARM architectures Package installation using system ‘libnng’ now automatically detects ‘libmbedtls’, removing need manually set ‘NANONEXT_TLS’ case. streamlined NNG build process eliminating unused options. Removes experimental nng_timer() utility non-essential function. Deprecated functions ‘send_vec’ ‘recv_vec’ removed.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"nanonext-020","dir":"Changelog","previous_headings":"","what":"nanonext 0.2.0","title":"nanonext 0.2.0","text":"CRAN release: 2022-02-10","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"nanonext 0.2.0","text":"send_aio() recv_aio() now return Aio objects, results may called using call_aio(). Designed run separate processes, reply server await data apply function returning result. request client performs async request server returns immediately Aio. New ncurl() minimalistic http(s) client. New nng_timer() utility demonstration NNG’s multithreading capabilities. Enables TLS system NNG library built TLS support (using Mbed TLS).","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"updates-0-2-0","dir":"Changelog","previous_headings":"","what":"Updates","title":"nanonext 0.2.0","text":"Dialer/listener starts close operations longer print message stderr successful less verbosity default. now permits R serialization option, consolidating functionality ’_vec’ series functions. Functions ‘send_vec’ ‘recv_vec’ deprecated removed future release. Functions ‘ctx_send’ ‘ctx_recv’ renamed send_ctx() recv_ctx() consistency. $socket_close() method nano objects renamed $close() better align functional API.","code":""},{"path":"https://nanonext.r-lib.org/news/index.html","id":"nanonext-010","dir":"Changelog","previous_headings":"","what":"nanonext 0.1.0","title":"nanonext 0.1.0","text":"CRAN release: 2022-01-25 Initial release CRAN, rOpenSci R-universe Github.","code":""}]
