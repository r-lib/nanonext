% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/thread.R
\name{.Thread}
\alias{.Thread}
\title{Threaded Execution}
\usage{
.Thread(symbol, ..., cv = NULL)
}
\arguments{
\item{symbol}{a native call symbol of class \sQuote{NativeSymbolInfo} and
\sQuote{CallRoutine}, as would be provided to \code{.Call}. Only supply
functions that are thread safe - see \sQuote{thread safety} section.}

\item{...}{(optional) additional arguments passed to the function (maximum of
15 currently supported).}

\item{cv}{(optional) if supplied, a 'conditionVariable' to signal once the
threaded function has completed.}
}
\value{
An external pointer. A reference should be retained to prevent the
    thread being garbage collected before it has completed.
}
\description{
Creates a new thread on which a C function is executed with supplied
    arguments. Designed for functions performing I/O e.g. writing to disk or
    communicating via sockets. THIS FUNCTION IS EXPERIMENTAL - USE WITH
    EXTREME CAUTION.
}
\section{Thread safety}{


    Attempting to allocate or modify R objects from another thread is not
    supported by R, and may cause instability, up to and including premature
    termination of the R session.

    Supply only \code{.Call} functions. \code{.C} and \code{.External}
    functions are not supported. The associated C function (DL_FUNC) must
    satisfy the following conditions:

    \itemize{
    \item Must not allocate any R objects, including via
    \code{Rf_coerceVector}, \code{Rf_asInteger} etc.
    \item Must return either \code{NULL}, a logical value, an installed
    symbol, an existing R object or object from the R precious list.
    \item Must not modify any existing R objects.
    \item Must not attempt to call the R interpreter.
    \item Must not use \code{Rprintf} or \code{PEprintf} to write to the
    console.
    }

    If unsure of the above, do NOT use this function.

    THIS FUNCTION IS EXPERIMENTAL - USE WITH EXTREME CAUTION.
}

\examples{
cv <- cv()
cv_value(cv)
t <- .Thread(nanonext:::rnng_sleep, 100L, cv = cv)
cv_value(cv)
msleep(100L)
cv_value(cv)

}
