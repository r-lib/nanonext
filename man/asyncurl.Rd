% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ncurl.R
\name{asyncurl}
\alias{asyncurl}
\alias{ncurl_aio}
\title{asyncUrl}
\usage{
asyncurl(
  url,
  convert = TRUE,
  method = NULL,
  headers = NULL,
  data = NULL,
  response = NULL,
  timeout = NULL,
  tls = NULL
)
}
\arguments{
\item{url}{the URL address.}

\item{convert}{[default TRUE] logical value whether to attempt conversion of
the received raw bytes to a character vector. Set to FALSE if downloading
non-text data.}

\item{method}{(optional) the HTTP method as a character string. Defaults to
'GET' if not specified, and could also be 'POST', 'PUT' etc.}

\item{headers}{(optional) a named character vector specifying the HTTP
request headers, for example: \cr
\code{c(Authorization = "Bearer APIKEY", `Content-Type` = "text/plain")}
\cr A non-character or non-named vector will be ignored.}

\item{data}{(optional) character string request data to be submitted. If a
vector, only the first element is taken, and non-character objects are
ignored.}

\item{response}{(optional) a character vector specifying the response headers
to return e.g. \code{c("date", "server")}. These are case-insensitive and
will return NULL if not present. A non-character vector will be ignored.}

\item{timeout}{(optional) integer value in milliseconds after which the
transaction times out if not yet complete.}

\item{tls}{(optional) applicable to secure HTTPS sites only, a client TLS
Configuration object created by \code{\link{tls_config}}. If missing or
NULL, certificates are not validated.}
}
\value{
An 'asyncUrl' (object of class 'asyncUrl' and 'recvAio') (invisibly).
    The following elements may be accessed:
    \itemize{
    \item \code{$status} - integer HTTP repsonse status code (200 - OK).
    Use \code{\link{status_code}} for a translation of the meaning.
    \item \code{$headers} - named list of response headers supplied in
    'response', or NULL otherwise. If the status code is within the 300
    range, i.e. a redirect, the response header 'Location' is automatically
    appended to return the redirect address.
    \item \code{$data} - the response body, as a character string if
    'convert' = TRUE (may be further parsed as html, json, xml etc. as
    required), or a raw byte vector if FALSE (use \code{\link{writeBin}} to
    save as a file).
    }
}
\description{
asyncUrl - a minimalist async http(s) client.
}
\section{Promises}{


    \sQuote{asyncUrl} may be used anywhere that accepts a \sQuote{promise}
    from the \CRANpkg{promises} package through the included
    \code{as.promise} method.

    The promises created are completely event-driven and non-polling.

    If a status code of 200 (OK) is returned then the promise is resolved
    with the reponse body, otherwise it is rejected with a translation of the
    status code or \sQuote{errorValue} as the case may be.
}

\examples{
r <- asyncurl("https://www.r-project.org/",
              response = c("date", "server"),
              timeout = 2000L)
call_aio(r)
r$status
r$headers
r$data

if (interactive() && requireNamespace("promises", quietly = TRUE)) {

library(promises)
p <- as.promise(r)
print(p)

p2 <- asyncurl("https://postman-echo.com/get") \%...>\% cat
is.promise(p2)

}

}
\seealso{
\code{\link{ncurl_session}} for persistent connections.
}
